/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterProfileImport } from './routes/register-profile'
import { Route as LoginImport } from './routes/login'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedHouseholdRouteImport } from './routes/_protected/household.route'
import { Route as ProtectedHouseholdIndexImport } from './routes/_protected/household.index'
import { Route as ProtectedHouseholdWelcomeImport } from './routes/_protected/household.welcome'
import { Route as ProtectedHouseholdJoinImport } from './routes/_protected/household.join'
import { Route as ProtectedHouseholdCreateImport } from './routes/_protected/household.create'
import { Route as ProtectedHouseholdHouseholdIdImport } from './routes/_protected/household.$householdId'

// Create/Update Routes

const RegisterProfileRoute = RegisterProfileImport.update({
  id: '/register-profile',
  path: '/register-profile',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedHouseholdRouteRoute = ProtectedHouseholdRouteImport.update({
  id: '/household',
  path: '/household',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedHouseholdIndexRoute = ProtectedHouseholdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedHouseholdRouteRoute,
} as any)

const ProtectedHouseholdWelcomeRoute = ProtectedHouseholdWelcomeImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => ProtectedHouseholdRouteRoute,
} as any)

const ProtectedHouseholdJoinRoute = ProtectedHouseholdJoinImport.update({
  id: '/join',
  path: '/join',
  getParentRoute: () => ProtectedHouseholdRouteRoute,
} as any)

const ProtectedHouseholdCreateRoute = ProtectedHouseholdCreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => ProtectedHouseholdRouteRoute,
} as any)

const ProtectedHouseholdHouseholdIdRoute =
  ProtectedHouseholdHouseholdIdImport.update({
    id: '/$householdId',
    path: '/$householdId',
    getParentRoute: () => ProtectedHouseholdRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register-profile': {
      id: '/register-profile'
      path: '/register-profile'
      fullPath: '/register-profile'
      preLoaderRoute: typeof RegisterProfileImport
      parentRoute: typeof rootRoute
    }
    '/_protected/household': {
      id: '/_protected/household'
      path: '/household'
      fullPath: '/household'
      preLoaderRoute: typeof ProtectedHouseholdRouteImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/household/$householdId': {
      id: '/_protected/household/$householdId'
      path: '/$householdId'
      fullPath: '/household/$householdId'
      preLoaderRoute: typeof ProtectedHouseholdHouseholdIdImport
      parentRoute: typeof ProtectedHouseholdRouteImport
    }
    '/_protected/household/create': {
      id: '/_protected/household/create'
      path: '/create'
      fullPath: '/household/create'
      preLoaderRoute: typeof ProtectedHouseholdCreateImport
      parentRoute: typeof ProtectedHouseholdRouteImport
    }
    '/_protected/household/join': {
      id: '/_protected/household/join'
      path: '/join'
      fullPath: '/household/join'
      preLoaderRoute: typeof ProtectedHouseholdJoinImport
      parentRoute: typeof ProtectedHouseholdRouteImport
    }
    '/_protected/household/welcome': {
      id: '/_protected/household/welcome'
      path: '/welcome'
      fullPath: '/household/welcome'
      preLoaderRoute: typeof ProtectedHouseholdWelcomeImport
      parentRoute: typeof ProtectedHouseholdRouteImport
    }
    '/_protected/household/': {
      id: '/_protected/household/'
      path: '/'
      fullPath: '/household/'
      preLoaderRoute: typeof ProtectedHouseholdIndexImport
      parentRoute: typeof ProtectedHouseholdRouteImport
    }
  }
}

// Create and export the route tree

interface ProtectedHouseholdRouteRouteChildren {
  ProtectedHouseholdHouseholdIdRoute: typeof ProtectedHouseholdHouseholdIdRoute
  ProtectedHouseholdCreateRoute: typeof ProtectedHouseholdCreateRoute
  ProtectedHouseholdJoinRoute: typeof ProtectedHouseholdJoinRoute
  ProtectedHouseholdWelcomeRoute: typeof ProtectedHouseholdWelcomeRoute
  ProtectedHouseholdIndexRoute: typeof ProtectedHouseholdIndexRoute
}

const ProtectedHouseholdRouteRouteChildren: ProtectedHouseholdRouteRouteChildren =
  {
    ProtectedHouseholdHouseholdIdRoute: ProtectedHouseholdHouseholdIdRoute,
    ProtectedHouseholdCreateRoute: ProtectedHouseholdCreateRoute,
    ProtectedHouseholdJoinRoute: ProtectedHouseholdJoinRoute,
    ProtectedHouseholdWelcomeRoute: ProtectedHouseholdWelcomeRoute,
    ProtectedHouseholdIndexRoute: ProtectedHouseholdIndexRoute,
  }

const ProtectedHouseholdRouteRouteWithChildren =
  ProtectedHouseholdRouteRoute._addFileChildren(
    ProtectedHouseholdRouteRouteChildren,
  )

interface ProtectedRouteChildren {
  ProtectedHouseholdRouteRoute: typeof ProtectedHouseholdRouteRouteWithChildren
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedHouseholdRouteRoute: ProtectedHouseholdRouteRouteWithChildren,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/register-profile': typeof RegisterProfileRoute
  '/household': typeof ProtectedHouseholdRouteRouteWithChildren
  '/household/$householdId': typeof ProtectedHouseholdHouseholdIdRoute
  '/household/create': typeof ProtectedHouseholdCreateRoute
  '/household/join': typeof ProtectedHouseholdJoinRoute
  '/household/welcome': typeof ProtectedHouseholdWelcomeRoute
  '/household/': typeof ProtectedHouseholdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/register-profile': typeof RegisterProfileRoute
  '/household/$householdId': typeof ProtectedHouseholdHouseholdIdRoute
  '/household/create': typeof ProtectedHouseholdCreateRoute
  '/household/join': typeof ProtectedHouseholdJoinRoute
  '/household/welcome': typeof ProtectedHouseholdWelcomeRoute
  '/household': typeof ProtectedHouseholdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/register-profile': typeof RegisterProfileRoute
  '/_protected/household': typeof ProtectedHouseholdRouteRouteWithChildren
  '/_protected/household/$householdId': typeof ProtectedHouseholdHouseholdIdRoute
  '/_protected/household/create': typeof ProtectedHouseholdCreateRoute
  '/_protected/household/join': typeof ProtectedHouseholdJoinRoute
  '/_protected/household/welcome': typeof ProtectedHouseholdWelcomeRoute
  '/_protected/household/': typeof ProtectedHouseholdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/register-profile'
    | '/household'
    | '/household/$householdId'
    | '/household/create'
    | '/household/join'
    | '/household/welcome'
    | '/household/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/register-profile'
    | '/household/$householdId'
    | '/household/create'
    | '/household/join'
    | '/household/welcome'
    | '/household'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/login'
    | '/register-profile'
    | '/_protected/household'
    | '/_protected/household/$householdId'
    | '/_protected/household/create'
    | '/_protected/household/join'
    | '/_protected/household/welcome'
    | '/_protected/household/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterProfileRoute: typeof RegisterProfileRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterProfileRoute: RegisterProfileRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/login",
        "/register-profile"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/household"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register-profile": {
      "filePath": "register-profile.tsx"
    },
    "/_protected/household": {
      "filePath": "_protected/household.route.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/household/$householdId",
        "/_protected/household/create",
        "/_protected/household/join",
        "/_protected/household/welcome",
        "/_protected/household/"
      ]
    },
    "/_protected/household/$householdId": {
      "filePath": "_protected/household.$householdId.tsx",
      "parent": "/_protected/household"
    },
    "/_protected/household/create": {
      "filePath": "_protected/household.create.tsx",
      "parent": "/_protected/household"
    },
    "/_protected/household/join": {
      "filePath": "_protected/household.join.tsx",
      "parent": "/_protected/household"
    },
    "/_protected/household/welcome": {
      "filePath": "_protected/household.welcome.tsx",
      "parent": "/_protected/household"
    },
    "/_protected/household/": {
      "filePath": "_protected/household.index.tsx",
      "parent": "/_protected/household"
    }
  }
}
ROUTE_MANIFEST_END */
