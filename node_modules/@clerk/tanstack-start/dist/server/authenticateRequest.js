import { createClerkClient } from '@clerk/backend';
import { AuthStatus } from '@clerk/backend/internal';
import { errorThrower } from '../utils/index.js';
import { patchRequest } from './utils/index.js';

// src/server/authenticateRequest.ts
async function authenticateRequest(request, opts) {
  const { audience, authorizedParties } = opts;
  const { apiUrl, secretKey, jwtKey, proxyUrl, isSatellite, domain, publishableKey } = opts;
  const { signInUrl, signUpUrl, afterSignInUrl, afterSignUpUrl } = opts;
  const requestState = await createClerkClient({
    apiUrl,
    secretKey,
    jwtKey,
    proxyUrl,
    isSatellite,
    domain,
    publishableKey,
    userAgent: `${"@clerk/tanstack-start"}@${"0.11.5"}`
  }).authenticateRequest(patchRequest(request), {
    audience,
    authorizedParties,
    signInUrl,
    signUpUrl,
    afterSignInUrl,
    afterSignUpUrl
  });
  const hasLocationHeader = requestState.headers.get("location");
  if (hasLocationHeader) {
    throw new Response(null, { status: 307, headers: requestState.headers });
  }
  if (requestState.status === AuthStatus.Handshake) {
    throw errorThrower.throw("Clerk: unexpected handshake without redirect");
  }
  return requestState;
}

export { authenticateRequest };
//# sourceMappingURL=authenticateRequest.js.map
//# sourceMappingURL=authenticateRequest.js.map