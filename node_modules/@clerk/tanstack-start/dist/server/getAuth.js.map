{"version":3,"sources":["../../src/server/getAuth.ts"],"names":[],"mappings":";;;;;;;AAaA,eAAsB,OAAA,CAAQ,SAAkB,IAAsC,EAAA;AACpF,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAO,OAAA,YAAA,CAAa,MAAM,2BAA2B,CAAA;AAAA;AAGvD,EAAM,MAAA,aAAA,GAAgB,WAAY,CAAA,OAAA,EAAS,IAAI,CAAA;AAE/C,EAAA,MAAM,YAAe,GAAA,MAAM,mBAAoB,CAAA,OAAA,EAAS,aAAa,CAAA;AAErE,EAAO,OAAA,0BAAA,CAA2B,YAAa,CAAA,MAAA,EAAQ,CAAA;AACzD","file":"getAuth.js","sourcesContent":["import type { AuthObject } from '@clerk/backend';\nimport { stripPrivateDataFromObject } from '@clerk/backend/internal';\n\nimport { errorThrower } from '../utils';\nimport { noFetchFnCtxPassedInGetAuth } from '../utils/errors';\nimport { authenticateRequest } from './authenticateRequest';\nimport { loadOptions } from './loadOptions';\nimport type { LoaderOptions } from './types';\n\ntype GetAuthReturn = Promise<AuthObject>;\n\ntype GetAuthOptions = Pick<LoaderOptions, 'secretKey'>;\n\nexport async function getAuth(request: Request, opts?: GetAuthOptions): GetAuthReturn {\n  if (!request) {\n    return errorThrower.throw(noFetchFnCtxPassedInGetAuth);\n  }\n\n  const loadedOptions = loadOptions(request, opts);\n\n  const requestState = await authenticateRequest(request, loadedOptions);\n\n  return stripPrivateDataFromObject(requestState.toAuth());\n}\n"]}