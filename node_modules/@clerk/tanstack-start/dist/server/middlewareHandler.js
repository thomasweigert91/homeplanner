import { authenticateRequest } from './authenticateRequest.js';
import { loadOptions } from './loadOptions.js';
import { getResponseClerkState } from './utils/index.js';

// src/server/middlewareHandler.ts
function createClerkHandler(eventHandler, clerkOptions = {}) {
  return (cb) => {
    return eventHandler(async ({ request, router, responseHeaders }) => {
      try {
        const loadedOptions = loadOptions(request, clerkOptions);
        const requestState = await authenticateRequest(request, loadedOptions);
        const clerkInitialState = getResponseClerkState(requestState, loadedOptions);
        router.update({
          context: { ...router.options.context, ...clerkInitialState }
        });
        await router.load();
      } catch (error) {
        if (error instanceof Response) {
          return error;
        }
        throw error;
      }
      return cb({ request, router, responseHeaders });
    });
  };
}

export { createClerkHandler };
//# sourceMappingURL=middlewareHandler.js.map
//# sourceMappingURL=middlewareHandler.js.map