{"version":3,"sources":["../../src/server/loadOptions.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAcO,IAAM,WAAc,GAAA,CAAC,OAAkB,EAAA,SAAA,GAA2B,EAAO,KAAA;AAC9E,EAAA,MAAM,YAAe,GAAA,kBAAA,CAAmB,YAAa,CAAA,OAAO,CAAC,CAAA;AAC7D,EAAA,MAAM,YAAY,UAAW,EAAA;AAC7B,EAAA,MAAM,QAAQ,QAAS,EAAA;AACvB,EAAM,MAAA,SAAA,GAAY,SAAU,CAAA,SAAA,IAAa,SAAU,CAAA,UAAA;AACnD,EAAM,MAAA,cAAA,GAAiB,SAAU,CAAA,cAAA,IAAkB,SAAU,CAAA,eAAA;AAC7D,EAAM,MAAA,MAAA,GAAS,SAAU,CAAA,MAAA,IAAU,SAAU,CAAA,aAAA;AAC7C,EAAA,MAAM,SAAS,cAAe,CAAA,eAAA,EAAiB,MAAM,OAAO,CAAA,IAAK,yBAAyB,cAAc,CAAA;AACxG,EAAM,MAAA,MAAA,GAAS,eAAgB,CAAA,SAAA,CAAU,MAAQ,EAAA,IAAI,IAAI,OAAQ,CAAA,GAAG,CAAC,CAAA,IAAK,SAAU,CAAA,MAAA;AACpF,EAAM,MAAA,WAAA,GAAc,eAAgB,CAAA,SAAA,CAAU,WAAa,EAAA,IAAI,IAAI,OAAQ,CAAA,GAAG,CAAC,CAAA,IAAK,SAAU,CAAA,YAAA;AAC9F,EAAA,MAAM,6BAA6B,eAAgB,CAAA,SAAA,EAAW,UAAU,YAAa,CAAA,QAAA,EAAU,UAAU,SAAS,CAAA;AAClH,EAAM,MAAA,SAAA,GAAY,SAAU,CAAA,SAAA,IAAa,SAAU,CAAA,WAAA;AACnD,EAAM,MAAA,SAAA,GAAY,SAAU,CAAA,SAAA,IAAa,SAAU,CAAA,WAAA;AACnD,EAAA,MAAM,iBAAiB,SAAU,CAAA,cAAA,IAAkB,qBAAsB,CAAA,KAAA,CAAM,OAAO,CAAE,CAAA,cAAA;AACxF,EAAA,MAAM,iBAAiB,SAAU,CAAA,cAAA,IAAkB,qBAAsB,CAAA,KAAA,CAAM,OAAO,CAAE,CAAA,cAAA;AAExF,EAAI,IAAA,QAAA;AACJ,EAAA,IAAI,CAAC,CAAC,0BAA8B,IAAA,kBAAA,CAAmB,0BAA0B,CAAG,EAAA;AAClF,IAAA,QAAA,GAAW,IAAI,GAAI,CAAA,0BAAA,EAA4B,YAAa,CAAA,QAAQ,EAAE,QAAS,EAAA;AAAA,GAC1E,MAAA;AACL,IAAW,QAAA,GAAA,0BAAA;AAAA;AAGb,EAAA,IAAI,CAAC,SAAW,EAAA;AAEd,IAAM,MAAA,YAAA,CAAa,MAAM,+BAA+B,CAAA;AAAA;AAG1D,EAAA,IAAI,WAAe,IAAA,CAAC,QAAY,IAAA,CAAC,MAAQ,EAAA;AAEvC,IAAM,MAAA,YAAA,CAAa,MAAM,sDAAsD,CAAA;AAAA;AAGjF,EAAA,IAAI,eAAe,CAAC,aAAA,CAAc,SAAS,CAAK,IAAA,0BAAA,CAA2B,SAAS,CAAG,EAAA;AAErF,IAAM,MAAA,YAAA,CAAa,MAAM,4DAA4D,CAAA;AAAA;AAGvF,EAAO,OAAA;AAAA;AAAA,IAEL,GAAG,SAAA;AAAA,IACH,SAAA;AAAA,IACA,cAAA;AAAA,IACA,MAAA;AAAA,IACA,MAAA;AAAA,IACA,MAAA;AAAA,IACA,WAAA;AAAA,IACA,QAAA;AAAA,IACA,SAAA;AAAA,IACA,SAAA;AAAA,IACA,cAAA;AAAA,IACA;AAAA,GACF;AACF","file":"loadOptions.js","sourcesContent":["import { createClerkRequest } from '@clerk/backend/internal';\nimport { apiUrlFromPublishableKey } from '@clerk/shared/apiUrlFromPublishableKey';\nimport { getEnvVariable } from '@clerk/shared/getEnvVariable';\nimport { isDevelopmentFromSecretKey } from '@clerk/shared/keys';\nimport { isHttpOrHttps, isProxyUrlRelative } from '@clerk/shared/proxy';\nimport { handleValueOrFn } from '@clerk/shared/utils';\nimport { getEvent } from 'vinxi/http';\n\nimport { errorThrower } from '../utils';\nimport { getPublicEnvVariables } from '../utils/env';\nimport { commonEnvs } from './constants';\nimport type { LoaderOptions } from './types';\nimport { patchRequest } from './utils';\n\nexport const loadOptions = (request: Request, overrides: LoaderOptions = {}) => {\n  const clerkRequest = createClerkRequest(patchRequest(request));\n  const commonEnv = commonEnvs();\n  const event = getEvent();\n  const secretKey = overrides.secretKey || commonEnv.SECRET_KEY;\n  const publishableKey = overrides.publishableKey || commonEnv.PUBLISHABLE_KEY;\n  const jwtKey = overrides.jwtKey || commonEnv.CLERK_JWT_KEY;\n  const apiUrl = getEnvVariable('CLERK_API_URL', event.context) || apiUrlFromPublishableKey(publishableKey);\n  const domain = handleValueOrFn(overrides.domain, new URL(request.url)) || commonEnv.DOMAIN;\n  const isSatellite = handleValueOrFn(overrides.isSatellite, new URL(request.url)) || commonEnv.IS_SATELLITE;\n  const relativeOrAbsoluteProxyUrl = handleValueOrFn(overrides?.proxyUrl, clerkRequest.clerkUrl, commonEnv.PROXY_URL);\n  const signInUrl = overrides.signInUrl || commonEnv.SIGN_IN_URL;\n  const signUpUrl = overrides.signUpUrl || commonEnv.SIGN_UP_URL;\n  const afterSignInUrl = overrides.afterSignInUrl || getPublicEnvVariables(event.context).afterSignInUrl;\n  const afterSignUpUrl = overrides.afterSignUpUrl || getPublicEnvVariables(event.context).afterSignUpUrl;\n\n  let proxyUrl;\n  if (!!relativeOrAbsoluteProxyUrl && isProxyUrlRelative(relativeOrAbsoluteProxyUrl)) {\n    proxyUrl = new URL(relativeOrAbsoluteProxyUrl, clerkRequest.clerkUrl).toString();\n  } else {\n    proxyUrl = relativeOrAbsoluteProxyUrl;\n  }\n\n  if (!secretKey) {\n    // eslint-disable-next-line @typescript-eslint/only-throw-error\n    throw errorThrower.throw('Clerk: no secret key provided');\n  }\n\n  if (isSatellite && !proxyUrl && !domain) {\n    // eslint-disable-next-line @typescript-eslint/only-throw-error\n    throw errorThrower.throw('Clerk: satellite mode requires a proxy URL or domain');\n  }\n\n  if (isSatellite && !isHttpOrHttps(signInUrl) && isDevelopmentFromSecretKey(secretKey)) {\n    // eslint-disable-next-line @typescript-eslint/only-throw-error\n    throw errorThrower.throw('Clerk: satellite mode requires a sign-in URL in production');\n  }\n\n  return {\n    // used to append options that are not initialized from env\n    ...overrides,\n    secretKey,\n    publishableKey,\n    jwtKey,\n    apiUrl,\n    domain,\n    isSatellite,\n    proxyUrl,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n  };\n};\n"]}