{"version":3,"sources":["../../src/server/middlewareHandler.ts"],"names":[],"mappings":";;;;;AAeO,SAAS,kBACd,CAAA,YAAA,EACA,YAA8B,GAAA,EAC9B,EAAA;AACA,EAAA,OAAO,CAAC,EAA+C,KAAA;AACrD,IAAA,OAAO,aAAa,OAAO,EAAE,OAAS,EAAA,MAAA,EAAQ,iBAAsB,KAAA;AAClE,MAAI,IAAA;AACF,QAAM,MAAA,aAAA,GAAgB,WAAY,CAAA,OAAA,EAAS,YAAY,CAAA;AAEvD,QAAA,MAAM,YAAe,GAAA,MAAM,mBAAoB,CAAA,OAAA,EAAS,aAAa,CAAA;AAErE,QAAM,MAAA,iBAAA,GAAoB,qBAAsB,CAAA,YAAA,EAAc,aAAa,CAAA;AAG3E,QAAA,MAAA,CAAO,MAAO,CAAA;AAAA,UACZ,SAAS,EAAE,GAAG,OAAO,OAAQ,CAAA,OAAA,EAAS,GAAG,iBAAkB;AAAA,SAC5D,CAAA;AAED,QAAA,MAAM,OAAO,IAAK,EAAA;AAAA,eACX,KAAO,EAAA;AACd,QAAA,IAAI,iBAAiB,QAAU,EAAA;AAE7B,UAAO,OAAA,KAAA;AAAA;AAIT,QAAM,MAAA,KAAA;AAAA;AAGR,MAAA,OAAO,EAAG,CAAA,EAAE,OAAS,EAAA,MAAA,EAAQ,iBAAiB,CAAA;AAAA,KAC/C,CAAA;AAAA,GACH;AACF","file":"middlewareHandler.js","sourcesContent":["import type { AnyRouter } from '@tanstack/react-router';\nimport type { EventHandler } from 'vinxi/http';\n\nimport { authenticateRequest } from './authenticateRequest';\nimport { loadOptions } from './loadOptions';\nimport type { LoaderOptions } from './types';\nimport { getResponseClerkState } from './utils';\n\nexport type HandlerCallback<TRouter extends AnyRouter> = (ctx: {\n  request: Request;\n  router: TRouter;\n  responseHeaders: Headers;\n}) => Response | Promise<Response>;\nexport type CustomizeStartHandler<TRouter extends AnyRouter> = (cb: HandlerCallback<TRouter>) => EventHandler;\n\nexport function createClerkHandler<TRouter extends AnyRouter>(\n  eventHandler: CustomizeStartHandler<TRouter>,\n  clerkOptions: LoaderOptions = {},\n) {\n  return (cb: HandlerCallback<TRouter>): EventHandler => {\n    return eventHandler(async ({ request, router, responseHeaders }) => {\n      try {\n        const loadedOptions = loadOptions(request, clerkOptions);\n\n        const requestState = await authenticateRequest(request, loadedOptions);\n\n        const clerkInitialState = getResponseClerkState(requestState, loadedOptions);\n\n        // Merging the TanStack router context with the Clerk context and loading the router\n        router.update({\n          context: { ...router.options.context, ...clerkInitialState },\n        });\n\n        await router.load();\n      } catch (error) {\n        if (error instanceof Response) {\n          // returning the response\n          return error;\n        }\n\n        // rethrowing the error if it is not a Response\n        throw error;\n      }\n\n      return cb({ request, router, responseHeaders });\n    });\n  };\n}\n"]}