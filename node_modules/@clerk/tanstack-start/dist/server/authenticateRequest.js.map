{"version":3,"sources":["../../src/server/authenticateRequest.ts"],"names":[],"mappings":";;;;;;AAOA,eAAsB,mBAAA,CACpB,SACA,IACyC,EAAA;AACzC,EAAM,MAAA,EAAE,QAAU,EAAA,iBAAA,EAAsB,GAAA,IAAA;AAExC,EAAM,MAAA,EAAE,QAAQ,SAAW,EAAA,MAAA,EAAQ,UAAU,WAAa,EAAA,MAAA,EAAQ,gBAAmB,GAAA,IAAA;AACrF,EAAA,MAAM,EAAE,SAAA,EAAW,SAAW,EAAA,cAAA,EAAgB,gBAAmB,GAAA,IAAA;AAEjE,EAAM,MAAA,YAAA,GAAe,MAAM,iBAAkB,CAAA;AAAA,IAC3C,MAAA;AAAA,IACA,SAAA;AAAA,IACA,MAAA;AAAA,IACA,QAAA;AAAA,IACA,WAAA;AAAA,IACA,MAAA;AAAA,IACA,cAAA;AAAA,IACA,SAAW,EAAA,CAAA,EAAG,uBAAY,CAAA,CAAA,EAAI,QAAe,CAAA;AAAA,GAC9C,CAAA,CAAE,mBAAoB,CAAA,YAAA,CAAa,OAAO,CAAG,EAAA;AAAA,IAC5C,QAAA;AAAA,IACA,iBAAA;AAAA,IACA,SAAA;AAAA,IACA,SAAA;AAAA,IACA,cAAA;AAAA,IACA;AAAA,GACD,CAAA;AAED,EAAA,MAAM,iBAAoB,GAAA,YAAA,CAAa,OAAQ,CAAA,GAAA,CAAI,UAAU,CAAA;AAC7D,EAAA,IAAI,iBAAmB,EAAA;AAGrB,IAAM,MAAA,IAAI,SAAS,IAAM,EAAA,EAAE,QAAQ,GAAK,EAAA,OAAA,EAAS,YAAa,CAAA,OAAA,EAAS,CAAA;AAAA;AAGzE,EAAI,IAAA,YAAA,CAAa,MAAW,KAAA,UAAA,CAAW,SAAW,EAAA;AAEhD,IAAM,MAAA,YAAA,CAAa,MAAM,8CAA8C,CAAA;AAAA;AAGzE,EAAO,OAAA,YAAA;AACT","file":"authenticateRequest.js","sourcesContent":["import { createClerkClient } from '@clerk/backend';\nimport type { AuthenticateRequestOptions, SignedInState, SignedOutState } from '@clerk/backend/internal';\nimport { AuthStatus } from '@clerk/backend/internal';\n\nimport { errorThrower } from '../utils';\nimport { patchRequest } from './utils';\n\nexport async function authenticateRequest(\n  request: Request,\n  opts: AuthenticateRequestOptions,\n): Promise<SignedInState | SignedOutState> {\n  const { audience, authorizedParties } = opts;\n\n  const { apiUrl, secretKey, jwtKey, proxyUrl, isSatellite, domain, publishableKey } = opts;\n  const { signInUrl, signUpUrl, afterSignInUrl, afterSignUpUrl } = opts;\n\n  const requestState = await createClerkClient({\n    apiUrl,\n    secretKey,\n    jwtKey,\n    proxyUrl,\n    isSatellite,\n    domain,\n    publishableKey,\n    userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}`,\n  }).authenticateRequest(patchRequest(request), {\n    audience,\n    authorizedParties,\n    signInUrl,\n    signUpUrl,\n    afterSignInUrl,\n    afterSignUpUrl,\n  });\n\n  const hasLocationHeader = requestState.headers.get('location');\n  if (hasLocationHeader) {\n    // triggering a handshake redirect\n    // eslint-disable-next-line @typescript-eslint/only-throw-error\n    throw new Response(null, { status: 307, headers: requestState.headers });\n  }\n\n  if (requestState.status === AuthStatus.Handshake) {\n    // eslint-disable-next-line @typescript-eslint/only-throw-error\n    throw errorThrower.throw('Clerk: unexpected handshake without redirect');\n  }\n\n  return requestState;\n}\n"]}