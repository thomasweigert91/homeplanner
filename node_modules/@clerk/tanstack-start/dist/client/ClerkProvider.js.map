{"version":3,"sources":["../../src/client/ClerkProvider.tsx"],"names":["ReactClerkProvider"],"mappings":";;;;;;;;;;;AAYA,IAAM,YAAe,GAAA;AAAA,EACnB,IAAM,EAAA,uBAAA;AAAA,EACN,OAAS,EAAA;AACX,CAAA;AAEA,IAAM,oBAAA,GAAyF,EAAE,OAAA,EAAS,MAAU,EAAA;AAE7G,SAAS,aAAc,CAAA,EAAE,QAAU,EAAA,GAAG,eAA+D,EAAA;AAC1G,EAAA,MAAM,oBAAoB,oBAAqB,EAAA;AAC/C,EAAA,MAAM,gBAAgB,eAAgB,CAAA;AAAA,IACpC,MAAQ,EAAA;AAAA,GACT,CAAA;AAED,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,oBAAA,CAAqB,OAAU,GAAA,iBAAA;AAAA,GACjC,EAAG,CAAC,iBAAiB,CAAC,CAAA;AAEtB,EAAA,MAAM,cAAiB,GAAA,QAAA,EAAc,GAAA,MAAA,CAAe,qBAAqB,aAAe,EAAA,iBAAA;AAExF,EAAA,MAAM,EAAE,aAAe,EAAA,GAAG,eAAkB,GAAA,sBAAA,CAAuB,gBAAgB,sBAAsB,CAAA;AAEzG,EAAA,MAAM,WAAc,GAAA;AAAA,IAClB,GAAG,oBAAoB,aAAa,CAAA;AAAA,IACpC,GAAG;AAAA,GACL;AAEA,EAAA,uBAEI,IAAA,CAAA,QAAA,EAAA,EAAA,QAAA,EAAA;AAAA,oBAAA,GAAA,CAAC,cAAY,QAA+B,EAAA,CAAA,4BAAA,EAAA,IAAA,CAAK,UAAU,aAAe,EAAA,iBAAiB,CAAC,CAAI,CAAA,CAAA,EAAA,CAAA;AAAA,oBAChG,GAAA,CAAC,oBAAqB,EAAA,EAAA,OAAA,EAAS,WAC7B,EAAA,QAAA,kBAAA,GAAA;AAAA,MAACA,eAAA;AAAA,MAAA;AAAA,QACC,YAAc,EAAA,aAAA;AAAA,QACd,WAAa,EAAA,YAAA;AAAA,QACb,UAAY,EAAA,CAAC,EACX,KAAA,oBAAA,CAAqB,OAAU,GAAA;AAAA,UAC7B,EAAA;AAAA,UACA,OAAS,EAAA;AAAA,SACV,CAAA;AAAA,QAEH,aAAe,EAAA,CAAC,EACd,KAAA,oBAAA,CAAqB,OAAU,GAAA;AAAA,UAC7B,EAAA;AAAA,UACA,OAAS,EAAA;AAAA,SACV,CAAA;AAAA,QAEF,GAAG,WAAA;AAAA,QAEH;AAAA;AAAA,KAEL,EAAA;AAAA,GACF,EAAA,CAAA;AAEJ;AACA,aAAA,CAAc,WAAc,GAAA,eAAA","file":"ClerkProvider.js","sourcesContent":["import { ClerkProvider as ReactClerkProvider } from '@clerk/clerk-react';\nimport { ScriptOnce, useRouteContext } from '@tanstack/react-router';\nimport { useEffect } from 'react';\n\nimport { isClient } from '../utils';\nimport { ClerkOptionsProvider } from './OptionsContext';\nimport type { TanstackStartClerkProviderProps } from './types';\nimport { useAwaitableNavigate } from './useAwaitableNavigate';\nimport { mergeWithPublicEnvs, pickFromClerkInitState } from './utils';\n\nexport * from '@clerk/clerk-react';\n\nconst SDK_METADATA = {\n  name: PACKAGE_NAME,\n  version: PACKAGE_VERSION,\n};\n\nconst awaitableNavigateRef: { current: ReturnType<typeof useAwaitableNavigate> | undefined } = { current: undefined };\n\nexport function ClerkProvider({ children, ...providerProps }: TanstackStartClerkProviderProps): JSX.Element {\n  const awaitableNavigate = useAwaitableNavigate();\n  const routerContext = useRouteContext({\n    strict: false,\n  });\n\n  useEffect(() => {\n    awaitableNavigateRef.current = awaitableNavigate;\n  }, [awaitableNavigate]);\n\n  const clerkInitState = isClient() ? (window as any).__clerk_init_state : routerContext?.clerkInitialState;\n\n  const { clerkSsrState, ...restInitState } = pickFromClerkInitState(clerkInitState?.__internal_clerk_state);\n\n  const mergedProps = {\n    ...mergeWithPublicEnvs(restInitState),\n    ...providerProps,\n  };\n\n  return (\n    <>\n      <ScriptOnce>{`window.__clerk_init_state = ${JSON.stringify(routerContext?.clerkInitialState)};`}</ScriptOnce>\n      <ClerkOptionsProvider options={mergedProps}>\n        <ReactClerkProvider\n          initialState={clerkSsrState}\n          sdkMetadata={SDK_METADATA}\n          routerPush={(to: string) =>\n            awaitableNavigateRef.current?.({\n              to,\n              replace: false,\n            })\n          }\n          routerReplace={(to: string) =>\n            awaitableNavigateRef.current?.({\n              to,\n              replace: true,\n            })\n          }\n          {...mergedProps}\n        >\n          {children}\n        </ReactClerkProvider>\n      </ClerkOptionsProvider>\n    </>\n  );\n}\nClerkProvider.displayName = 'ClerkProvider';\n"]}