{"version":3,"sources":["../../src/client/uiComponents.tsx"],"names":["BaseUserProfile","BaseOrganizationProfile","BaseOrganizationList","BaseSignIn","BaseSignUp"],"mappings":";;;;;;AAWA,IAAM,qCAAqC,MAAM;AAC/C,EAAM,MAAA,EAAE,MAAO,EAAA,GAAI,SAAU,CAAA;AAAA,IAC3B,MAAQ,EAAA;AAAA,GACT,CAAA;AACD,EAAM,MAAA,EAAE,QAAS,EAAA,GAAI,WAAY,EAAA;AAIjC,EAAA,MAAM,kBAAkB,MAAU,IAAA,EAAA;AAKlC,EAAA,MAAM,IAAO,GAAA,QAAA,CAAS,OAAQ,CAAA,eAAA,EAAiB,EAAE,CAAE,CAAA,OAAA,CAAQ,KAAO,EAAA,EAAE,CAAE,CAAA,OAAA,CAAQ,KAAO,EAAA,EAAE,EAAE,IAAK,EAAA;AAE9F,EAAA,OAAO,IAAI,IAAI,CAAA,CAAA;AACjB,CAAA;AAMO,IAAM,cAAsC,MAAO,CAAA,MAAA;AAAA,EACxD,CAAC,KAA4B,KAAA;AAC3B,IAAA,MAAM,OAAO,kCAAmC,EAAA;AAChD,IAAO,uBAAA,GAAA,CAACA,iBAAiB,GAAG,eAAA,CAAgB,eAAe,KAAO,EAAA,EAAE,IAAK,EAAC,CAAG,EAAA,CAAA;AAAA,GAC/E;AAAA,EACA,EAAE,GAAGA,aAAgB;AACvB;AAMO,IAAM,sBAAsD,MAAO,CAAA,MAAA;AAAA,EACxE,CAAC,KAAoC,KAAA;AACnC,IAAA,MAAM,OAAO,kCAAmC,EAAA;AAChD,IAAO,uBAAA,GAAA,CAACC,yBAAyB,GAAG,eAAA,CAAgB,uBAAuB,KAAO,EAAA,EAAE,IAAK,EAAC,CAAG,EAAA,CAAA;AAAA,GAC/F;AAAA,EACA,EAAE,GAAGA,qBAAwB;AAC/B;AAEO,IAAM,mBAAgD,MAAO,CAAA,MAAA;AAAA,EAClE,CAAC,KAAoC,KAAA;AACnC,IAAA,MAAM,OAAO,kCAAmC,EAAA;AAChD,IAAO,uBAAA,GAAA,CAACC,sBAAsB,GAAG,eAAA,CAAgB,oBAAoB,KAAO,EAAA,EAAE,IAAK,EAAC,CAAG,EAAA,CAAA;AAAA,GACzF;AAAA,EACA,EAAE,GAAGA,kBAAqB;AAC5B;AAEa,IAAA,MAAA,GAAS,CAAC,KAAuB,KAAA;AAC5C,EAAA,MAAM,OAAO,kCAAmC,EAAA;AAChD,EAAO,uBAAA,GAAA,CAACC,YAAY,GAAG,eAAA,CAAgB,UAAU,KAAO,EAAA,EAAE,IAAK,EAAC,CAAG,EAAA,CAAA;AACrE;AAEa,IAAA,MAAA,GAAS,CAAC,KAAuB,KAAA;AAC5C,EAAA,MAAM,OAAO,kCAAmC,EAAA;AAChD,EAAO,uBAAA,GAAA,CAACC,YAAY,GAAG,eAAA,CAAgB,UAAU,KAAO,EAAA,EAAE,IAAK,EAAC,CAAG,EAAA,CAAA;AACrE","file":"uiComponents.js","sourcesContent":["import {\n  OrganizationList as BaseOrganizationList,\n  OrganizationProfile as BaseOrganizationProfile,\n  SignIn as BaseSignIn,\n  SignUp as BaseSignUp,\n  UserProfile as BaseUserProfile,\n} from '@clerk/clerk-react';\nimport { useRoutingProps } from '@clerk/clerk-react/internal';\nimport type { OrganizationProfileProps, SignInProps, SignUpProps, UserProfileProps } from '@clerk/types';\nimport { useLocation, useParams } from '@tanstack/react-router';\n\nconst usePathnameWithoutSplatRouteParams = () => {\n  const { _splat } = useParams({\n    strict: false,\n  });\n  const { pathname } = useLocation();\n\n  // Get the splat route params\n  // TanStack Router uses _splat to represent the splat route params\n  const splatRouteParam = _splat || '';\n\n  // Remove the splat route param from the pathname\n  // so we end up with the pathname where the components are mounted at\n  // eg /user/123/profile/security will return /user/123/profile as the path\n  const path = pathname.replace(splatRouteParam, '').replace(/\\/$/, '').replace(/^\\//, '').trim();\n\n  return `/${path}`;\n};\n\n// The assignment of UserProfile with BaseUserProfile props is used\n// to support the CustomPage functionality (eg UserProfile.Page)\n// Also the `typeof BaseUserProfile` is used to resolved the following error:\n// \"The inferred type of 'UserProfile' cannot be named without a reference to ...\"\nexport const UserProfile: typeof BaseUserProfile = Object.assign(\n  (props: UserProfileProps) => {\n    const path = usePathnameWithoutSplatRouteParams();\n    return <BaseUserProfile {...useRoutingProps('UserProfile', props, { path })} />;\n  },\n  { ...BaseUserProfile },\n);\n\n// The assignment of OrganizationProfile with BaseOrganizationProfile props is used\n// to support the CustomPage functionality (eg OrganizationProfile.Page)\n// Also the `typeof BaseOrganizationProfile` is used to resolved the following error:\n// \"The inferred type of 'OrganizationProfile' cannot be named without a reference to ...\"\nexport const OrganizationProfile: typeof BaseOrganizationProfile = Object.assign(\n  (props: OrganizationProfileProps) => {\n    const path = usePathnameWithoutSplatRouteParams();\n    return <BaseOrganizationProfile {...useRoutingProps('OrganizationProfile', props, { path })} />;\n  },\n  { ...BaseOrganizationProfile },\n);\n\nexport const OrganizationList: typeof BaseOrganizationList = Object.assign(\n  (props: OrganizationProfileProps) => {\n    const path = usePathnameWithoutSplatRouteParams();\n    return <BaseOrganizationList {...useRoutingProps('OrganizationList', props, { path })} />;\n  },\n  { ...BaseOrganizationList },\n);\n\nexport const SignIn = (props: SignInProps) => {\n  const path = usePathnameWithoutSplatRouteParams();\n  return <BaseSignIn {...useRoutingProps('SignIn', props, { path })} />;\n};\n\nexport const SignUp = (props: SignUpProps) => {\n  const path = usePathnameWithoutSplatRouteParams();\n  return <BaseSignUp {...useRoutingProps('SignUp', props, { path })} />;\n};\n"]}