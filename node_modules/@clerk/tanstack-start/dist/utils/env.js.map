{"version":3,"sources":["../../src/utils/env.ts"],"names":[],"mappings":";;;;AAIa,IAAA,qBAAA,GAAwB,CAAC,OAA6B,KAAA;AACjE,EAAM,MAAA,QAAA,GAAW,CAAC,IAAyB,KAAA;AACzC,IAAO,OAAA,cAAA,CAAe,QAAQ,IAAI,CAAA,CAAA,EAAI,OAAO,CAAK,IAAA,cAAA,CAAe,MAAM,OAAO,CAAA;AAAA,GAChF;AAEA,EAAO,OAAA;AAAA,IACL,cAAA,EAAgB,SAAS,uBAAuB,CAAA;AAAA,IAChD,MAAA,EAAQ,SAAS,cAAc,CAAA;AAAA,IAC/B,WAAa,EAAA,QAAA,CAAS,QAAS,CAAA,oBAAoB,CAAC,CAAA;AAAA,IACpD,QAAA,EAAU,SAAS,iBAAiB,CAAA;AAAA,IACpC,SAAA,EAAW,SAAS,mBAAmB,CAAA;AAAA,IACvC,SAAA,EAAW,SAAS,mBAAmB,CAAA;AAAA,IACvC,UAAY,EAAA,QAAA,CAAS,cAAc,CAAA,IAAK,SAAS,UAAU,CAAA;AAAA,IAC3D,cAAA,EAAgB,SAAS,kBAAkB,CAAA;AAAA,IAC3C,cAAA,EAAgB,SAAS,kBAAkB,CAAA;AAAA,IAC3C,iBAAmB,EAAA,QAAA,CAAS,QAAS,CAAA,0BAA0B,CAAC,CAAA;AAAA,IAChE,cAAgB,EAAA,QAAA,CAAS,QAAS,CAAA,uBAAuB,CAAC,CAAA;AAAA,IAC1D,cAAA,EAAgB,SAAS,yBAAyB,CAAA;AAAA,IAClD,cAAA,EAAgB,SAAS,yBAAyB;AAAA,GACpD;AACF","file":"env.js","sourcesContent":["import { getEnvVariable } from '@clerk/shared/getEnvVariable';\nimport { isTruthy } from '@clerk/shared/underscore';\nimport type { H3EventContext } from 'vinxi/http';\n\nexport const getPublicEnvVariables = (context?: H3EventContext) => {\n  const getValue = (name: string): string => {\n    return getEnvVariable(`VITE_${name}`, context) || getEnvVariable(name, context);\n  };\n\n  return {\n    publishableKey: getValue('CLERK_PUBLISHABLE_KEY'),\n    domain: getValue('CLERK_DOMAIN'),\n    isSatellite: isTruthy(getValue('CLERK_IS_SATELLITE')),\n    proxyUrl: getValue('CLERK_PROXY_URL'),\n    signInUrl: getValue('CLERK_SIGN_IN_URL'),\n    signUpUrl: getValue('CLERK_SIGN_UP_URL'),\n    clerkJsUrl: getValue('CLERK_JS_URL') || getValue('CLERK_JS'),\n    clerkJsVariant: getValue('CLERK_JS_VARIANT') as '' | 'headless' | undefined,\n    clerkJsVersion: getValue('CLERK_JS_VERSION'),\n    telemetryDisabled: isTruthy(getValue('CLERK_TELEMETRY_DISABLED')),\n    telemetryDebug: isTruthy(getValue('CLERK_TELEMETRY_DEBUG')),\n    afterSignInUrl: getValue('CLERK_AFTER_SIGN_IN_URL'),\n    afterSignUpUrl: getValue('CLERK_AFTER_SIGN_UP_URL'),\n  } as const;\n};\n"]}