{
  "version": 3,
  "sources": ["../../../../@tanstack/react-router-with-query/src/index.tsx"],
  "sourcesContent": ["import { Fragment } from 'react'\nimport {\n  QueryClientProvider,\n  dehydrate,\n  hashKey,\n  hydrate,\n} from '@tanstack/react-query'\nimport { isRedirect } from '@tanstack/router-core'\nimport type { AnyRouter } from '@tanstack/react-router'\nimport type {\n  QueryClient,\n  QueryObserverResult,\n  UseQueryOptions,\n} from '@tanstack/react-query'\n\ntype AdditionalOptions = {\n  WrapProvider?: (props: { children: any }) => React.JSX.Element\n  /**\n   * If `true`, the QueryClient will handle errors thrown by `redirect()` inside of mutations and queries.\n   *\n   * @default true\n   * @link [Guide](https://tanstack.com/router/latest/docs/framework/react/api/router/redirectFunction)\n   */\n  handleRedirects?: boolean\n}\n\nexport type ValidateRouter<TRouter extends AnyRouter> =\n  NonNullable<TRouter['options']['context']> extends {\n    queryClient: QueryClient\n  }\n    ? TRouter\n    : never\n\nexport function routerWithQueryClient<TRouter extends AnyRouter>(\n  router: ValidateRouter<TRouter>,\n  queryClient: QueryClient,\n  additionalOpts?: AdditionalOptions,\n): TRouter {\n  const seenQueryKeys = new Set<string>()\n  const streamedQueryKeys = new Set<string>()\n\n  const ogClientOptions = queryClient.getDefaultOptions()\n  queryClient.setDefaultOptions({\n    ...ogClientOptions,\n    queries: {\n      ...ogClientOptions.queries,\n      _experimental_beforeQuery: (options: UseQueryOptions) => {\n        // Call the original beforeQuery\n        ;(ogClientOptions.queries as any)?._experimental_beforeQuery?.(options)\n\n        const hash = options.queryKeyHashFn || hashKey\n        // On the server, check if we've already seen the query before\n        if (router.isServer) {\n          if (seenQueryKeys.has(hash(options.queryKey))) {\n            return\n          }\n\n          seenQueryKeys.add(hash(options.queryKey))\n\n          // If we haven't seen the query and we have data for it,\n          // That means it's going to get dehydrated with critical\n          // data, so we can skip the injection\n          if (queryClient.getQueryData(options.queryKey) !== undefined) {\n            ;(options as any).__skipInjection = true\n            return\n          }\n        } else {\n          // On the client, pick up the deferred data from the stream\n          const dehydratedClient = router.clientSsr!.getStreamedValue<any>(\n            '__QueryClient__' + hash(options.queryKey),\n          )\n\n          // If we have data, hydrate it into the query client\n          if (dehydratedClient && !dehydratedClient.hydrated) {\n            dehydratedClient.hydrated = true\n            hydrate(queryClient, dehydratedClient)\n          }\n        }\n      },\n      _experimental_afterQuery: (\n        options: UseQueryOptions,\n        _result: QueryObserverResult,\n      ) => {\n        // On the server (if we're not skipping injection)\n        // send down the dehydrated query\n        const hash = options.queryKeyHashFn || hashKey\n        if (\n          router.isServer &&\n          !(options as any).__skipInjection &&\n          queryClient.getQueryData(options.queryKey) !== undefined &&\n          !streamedQueryKeys.has(hash(options.queryKey))\n        ) {\n          streamedQueryKeys.add(hash(options.queryKey))\n\n          router.serverSsr!.streamValue(\n            '__QueryClient__' + hash(options.queryKey),\n            dehydrate(queryClient, {\n              shouldDehydrateMutation: () => false,\n              shouldDehydrateQuery: (query) =>\n                hash(query.queryKey) === hash(options.queryKey),\n            }),\n          )\n        }\n\n        // Call the original afterQuery\n        ;(ogClientOptions.queries as any)?._experimental_afterQuery?.(\n          options,\n          _result,\n        )\n      },\n    } as any,\n  })\n\n  if (additionalOpts?.handleRedirects ?? true) {\n    const ogMutationCacheConfig = queryClient.getMutationCache().config\n    queryClient.getMutationCache().config = {\n      ...ogMutationCacheConfig,\n      onError: (error, _variables, _context, _mutation) => {\n        if (isRedirect(error)) {\n          return router.navigate(\n            router.resolveRedirect({\n              ...error,\n              _fromLocation: router.state.location,\n            }),\n          )\n        }\n\n        return ogMutationCacheConfig.onError?.(\n          error,\n          _variables,\n          _context,\n          _mutation,\n        )\n      },\n    }\n\n    const ogQueryCacheConfig = queryClient.getQueryCache().config\n    queryClient.getQueryCache().config = {\n      ...ogQueryCacheConfig,\n      onError: (error, _query) => {\n        if (isRedirect(error)) {\n          return router.navigate(\n            router.resolveRedirect({\n              ...error,\n              _fromLocation: router.state.location,\n            }),\n          )\n        }\n\n        return ogQueryCacheConfig.onError?.(error, _query)\n      },\n    }\n  }\n\n  const ogOptions = router.options\n  router.options = {\n    ...router.options,\n    dehydrate: () => {\n      return {\n        ...ogOptions.dehydrate?.(),\n        // When critical data is dehydrated, we also dehydrate the query client\n        dehydratedQueryClient: dehydrate(queryClient),\n      }\n    },\n    hydrate: (dehydrated: any) => {\n      ogOptions.hydrate?.(dehydrated)\n      // On the client, hydrate the query client with the dehydrated data\n      hydrate(queryClient, dehydrated.dehydratedQueryClient)\n    },\n    context: {\n      ...ogOptions.context,\n      // Pass the query client to the context, so we can access it in loaders\n      queryClient,\n    },\n    // Wrap the app in a QueryClientProvider\n    Wrap: ({ children }) => {\n      const OuterWrapper = additionalOpts?.WrapProvider || Fragment\n      const OGWrap = ogOptions.Wrap || Fragment\n      return (\n        <OuterWrapper>\n          <QueryClientProvider client={queryClient}>\n            <OGWrap>{children}</OGWrap>\n          </QueryClientProvider>\n        </OuterWrapper>\n      )\n    },\n  }\n\n  return router\n}\n"],
  "mappings": "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",
  "names": []
}
