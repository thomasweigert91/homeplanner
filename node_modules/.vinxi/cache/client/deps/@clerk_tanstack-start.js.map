{
  "version": 3,
  "sources": ["../../../../@clerk/tanstack-start/src/utils/errors.ts", "../../../../@clerk/tanstack-start/src/utils/index.ts", "../../../../@clerk/tanstack-start/src/client/OptionsContext.tsx", "../../../../@clerk/tanstack-start/src/client/useAwaitableNavigate.ts", "../../../../@clerk/shared/src/getEnvVariable.ts", "../../../../@clerk/tanstack-start/src/utils/env.ts", "../../../../@clerk/tanstack-start/src/client/utils.ts", "../../../../@clerk/tanstack-start/src/client/ClerkProvider.tsx", "../../../../@clerk/clerk-react/src/hooks/useRoutingProps.ts", "../../../../@clerk/clerk-react/src/internal.ts", "../../../../@clerk/tanstack-start/src/client/uiComponents.tsx", "../../../../@clerk/tanstack-start/src/index.ts"],
  "sourcesContent": ["const createErrorMessage = (msg: string) => {\n  return `ðŸ”’ Clerk: ${msg.trim()}\n\nFor more info, check out the docs: https://clerk.com/docs,\nor come say hi in our discord server: https://clerk.com/discord\n\n`;\n};\n\nexport const noFetchFnCtxPassedInGetAuth = createErrorMessage(`\n  You're calling 'getAuth()' from a server function, without providing the ctx object.\n  Example:\n\n  export const someServerFunction = createServerFn('GET', async (_payload, ctx) => {\n    const auth = getAuth(ctx);\n    ...\n  });\n  `);\n\nexport const clerkHandlerNotConfigured = createErrorMessage(`\nIt looks like you're trying to use Clerk without configuring the Clerk handler.\n\nTo fix this, make sure you have the \\`clerkHandler()\\` configure in you SSR entry file (example: app/ssr.tsx).\n\nFor more info, check out the docs: https://github.com/clerk/javascript/tree/main/packages/tanstack-start#setup-clerkhandler-in-the-ssr-entrypoint,\n    `);\n\nexport const warnPackageRenaming = () => {\n  console.warn(\n    '[@clerk/tanstack-start] Warning: This package has moved to @clerk/tanstack-react-start. Please switch to the new package, as this is the last release under this package name.',\n  );\n};\n", "import { buildErrorThrower } from '@clerk/shared/error';\n\nexport const isClient = () => typeof window !== 'undefined';\n\nexport const isServer = () => !isClient();\n\nexport const errorThrower = buildErrorThrower({\n  packageName: PACKAGE_NAME,\n});\n", "import React from 'react';\n\nimport type { TanstackStartClerkProviderProps as ClerkProviderProps } from './types';\n\ntype ClerkContextValue = Partial<Omit<ClerkProviderProps, 'children'>>;\n\nconst ClerkOptionsCtx = React.createContext<{ value: ClerkContextValue } | undefined>(undefined);\nClerkOptionsCtx.displayName = 'ClerkOptionsCtx';\n\nconst useClerkOptions = (): ClerkContextValue => {\n  const ctx = React.useContext(ClerkOptionsCtx) as { value: ClerkContextValue };\n  return ctx.value;\n};\n\nconst ClerkOptionsProvider = (props: React.PropsWithChildren<{ options: ClerkContextValue }>) => {\n  const { children, options } = props;\n  return <ClerkOptionsCtx.Provider value={{ value: options }}>{children}</ClerkOptionsCtx.Provider>;\n};\n\nexport { ClerkOptionsProvider, useClerkOptions };\n", "import type { NavigateOptions } from '@tanstack/react-router';\nimport { useLocation, useNavigate } from '@tanstack/react-router';\nimport React, { useTransition } from 'react';\n\ntype Resolve = (value?: unknown) => void;\n\nexport const useAwaitableNavigate = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const resolveFunctionsRef = React.useRef<Resolve[]>([]);\n  const resolveAll = () => {\n    resolveFunctionsRef.current.forEach(resolve => resolve());\n    resolveFunctionsRef.current.splice(0, resolveFunctionsRef.current.length);\n  };\n  const [_, startTransition] = useTransition();\n\n  React.useEffect(() => {\n    resolveAll();\n  }, [location]);\n\n  return (options: NavigateOptions) => {\n    return new Promise(res => {\n      startTransition(() => {\n        resolveFunctionsRef.current.push(res);\n        res(navigate(options));\n      });\n    });\n  };\n};\n", "type CloudflareEnv = { env: Record<string, string> };\n\nconst hasCloudflareProxyContext = (context: any): context is { cloudflare: CloudflareEnv } => {\n  return !!context?.cloudflare?.env;\n};\n\nconst hasCloudflareContext = (context: any): context is CloudflareEnv => {\n  return !!context?.env;\n};\n\n/**\n * Retrieves an environment variable across runtime environments.\n * @param name - The environment variable name to retrieve\n * @param context - Optional context object that may contain environment values\n * @returns The environment variable value or empty string if not found\n */\nexport const getEnvVariable = (name: string, context?: Record<string, any>): string => {\n  // Node envs\n  if (typeof process !== 'undefined' && process.env && typeof process.env[name] === 'string') {\n    return process.env[name];\n  }\n\n  // Vite specific\n  if (typeof import.meta !== 'undefined' && import.meta.env && typeof import.meta.env[name] === 'string') {\n    return import.meta.env[name];\n  }\n\n  if (hasCloudflareProxyContext(context)) {\n    return context.cloudflare.env[name] || '';\n  }\n\n  // Cloudflare\n  if (hasCloudflareContext(context)) {\n    return context.env[name] || '';\n  }\n\n  // Check whether the value exists in the context object directly\n  if (context && typeof context[name] === 'string') {\n    return context[name];\n  }\n\n  // Cloudflare workers\n  try {\n    return globalThis[name as keyof typeof globalThis];\n  } catch {\n    // This will raise an error in Cloudflare Pages\n  }\n\n  return '';\n};\n", "import { getEnvVariable } from '@clerk/shared/getEnvVariable';\nimport { isTruthy } from '@clerk/shared/underscore';\nimport type { H3EventContext } from 'vinxi/http';\n\nexport const getPublicEnvVariables = (context?: H3EventContext) => {\n  const getValue = (name: string): string => {\n    return getEnvVariable(`VITE_${name}`, context) || getEnvVariable(name, context);\n  };\n\n  return {\n    publishableKey: getValue('CLERK_PUBLISHABLE_KEY'),\n    domain: getValue('CLERK_DOMAIN'),\n    isSatellite: isTruthy(getValue('CLERK_IS_SATELLITE')),\n    proxyUrl: getValue('CLERK_PROXY_URL'),\n    signInUrl: getValue('CLERK_SIGN_IN_URL'),\n    signUpUrl: getValue('CLERK_SIGN_UP_URL'),\n    clerkJsUrl: getValue('CLERK_JS_URL') || getValue('CLERK_JS'),\n    clerkJsVariant: getValue('CLERK_JS_VARIANT') as '' | 'headless' | undefined,\n    clerkJsVersion: getValue('CLERK_JS_VERSION'),\n    telemetryDisabled: isTruthy(getValue('CLERK_TELEMETRY_DISABLED')),\n    telemetryDebug: isTruthy(getValue('CLERK_TELEMETRY_DEBUG')),\n    afterSignInUrl: getValue('CLERK_AFTER_SIGN_IN_URL'),\n    afterSignUpUrl: getValue('CLERK_AFTER_SIGN_UP_URL'),\n  } as const;\n};\n", "import { getPublicEnvVariables } from '../utils/env';\nimport type { TanstackStartClerkProviderProps } from './types';\n\ntype TanStackProviderAndInitialProps = Omit<TanstackStartClerkProviderProps, 'children'>;\n\nexport const pickFromClerkInitState = (\n  clerkInitState: any,\n): TanStackProviderAndInitialProps & {\n  clerkSsrState: any;\n} => {\n  const {\n    __clerk_ssr_state,\n    __publishableKey,\n    __proxyUrl,\n    __domain,\n    __isSatellite,\n    __signInUrl,\n    __signUpUrl,\n    __afterSignInUrl,\n    __afterSignUpUrl,\n    __clerkJSUrl,\n    __clerkJSVersion,\n    __telemetryDisabled,\n    __telemetryDebug,\n    __signInForceRedirectUrl,\n    __signUpForceRedirectUrl,\n    __signInFallbackRedirectUrl,\n    __signUpFallbackRedirectUrl,\n  } = clerkInitState || {};\n\n  return {\n    clerkSsrState: __clerk_ssr_state,\n    publishableKey: __publishableKey,\n    proxyUrl: __proxyUrl,\n    domain: __domain,\n    isSatellite: !!__isSatellite,\n    signInUrl: __signInUrl,\n    signUpUrl: __signUpUrl,\n    afterSignInUrl: __afterSignInUrl,\n    afterSignUpUrl: __afterSignUpUrl,\n    clerkJSUrl: __clerkJSUrl,\n    clerkJSVersion: __clerkJSVersion,\n    telemetry: {\n      disabled: __telemetryDisabled,\n      debug: __telemetryDebug,\n    },\n    signInForceRedirectUrl: __signInForceRedirectUrl,\n    signUpForceRedirectUrl: __signUpForceRedirectUrl,\n    signInFallbackRedirectUrl: __signInFallbackRedirectUrl,\n    signUpFallbackRedirectUrl: __signUpFallbackRedirectUrl,\n  };\n};\n\nexport const mergeWithPublicEnvs = (restInitState: any) => {\n  return {\n    ...restInitState,\n    publishableKey: restInitState.publishableKey || getPublicEnvVariables().publishableKey,\n    domain: restInitState.domain || getPublicEnvVariables().domain,\n    isSatellite: restInitState.isSatellite || getPublicEnvVariables().isSatellite,\n    signInUrl: restInitState.signInUrl || getPublicEnvVariables().signInUrl,\n    signUpUrl: restInitState.signUpUrl || getPublicEnvVariables().signUpUrl,\n    afterSignInUrl: restInitState.afterSignInUrl || getPublicEnvVariables().afterSignInUrl,\n    afterSignUpUrl: restInitState.afterSignUpUrl || getPublicEnvVariables().afterSignUpUrl,\n    clerkJSUrl: restInitState.clerkJSUrl || getPublicEnvVariables().clerkJsUrl,\n    clerkJSVersion: restInitState.clerkJSVersion || getPublicEnvVariables().clerkJsVersion,\n    signInForceRedirectUrl: restInitState.signInForceRedirectUrl,\n    clerkJSVariant: restInitState.clerkJSVariant || getPublicEnvVariables().clerkJsVariant,\n  };\n};\n", "import { ClerkProvider as ReactClerkProvider } from '@clerk/clerk-react';\nimport { ScriptOnce, useRouteContext } from '@tanstack/react-router';\nimport { useEffect } from 'react';\n\nimport { isClient } from '../utils';\nimport { ClerkOptionsProvider } from './OptionsContext';\nimport type { TanstackStartClerkProviderProps } from './types';\nimport { useAwaitableNavigate } from './useAwaitableNavigate';\nimport { mergeWithPublicEnvs, pickFromClerkInitState } from './utils';\n\nexport * from '@clerk/clerk-react';\n\nconst SDK_METADATA = {\n  name: PACKAGE_NAME,\n  version: PACKAGE_VERSION,\n};\n\nconst awaitableNavigateRef: { current: ReturnType<typeof useAwaitableNavigate> | undefined } = { current: undefined };\n\nexport function ClerkProvider({ children, ...providerProps }: TanstackStartClerkProviderProps): JSX.Element {\n  const awaitableNavigate = useAwaitableNavigate();\n  const routerContext = useRouteContext({\n    strict: false,\n  });\n\n  useEffect(() => {\n    awaitableNavigateRef.current = awaitableNavigate;\n  }, [awaitableNavigate]);\n\n  const clerkInitState = isClient() ? (window as any).__clerk_init_state : routerContext?.clerkInitialState;\n\n  const { clerkSsrState, ...restInitState } = pickFromClerkInitState(clerkInitState?.__internal_clerk_state);\n\n  const mergedProps = {\n    ...mergeWithPublicEnvs(restInitState),\n    ...providerProps,\n  };\n\n  return (\n    <>\n      <ScriptOnce>{`window.__clerk_init_state = ${JSON.stringify(routerContext?.clerkInitialState)};`}</ScriptOnce>\n      <ClerkOptionsProvider options={mergedProps}>\n        <ReactClerkProvider\n          initialState={clerkSsrState}\n          sdkMetadata={SDK_METADATA}\n          routerPush={(to: string) =>\n            awaitableNavigateRef.current?.({\n              to,\n              replace: false,\n            })\n          }\n          routerReplace={(to: string) =>\n            awaitableNavigateRef.current?.({\n              to,\n              replace: true,\n            })\n          }\n          {...mergedProps}\n        >\n          {children}\n        </ReactClerkProvider>\n      </ClerkOptionsProvider>\n    </>\n  );\n}\nClerkProvider.displayName = 'ClerkProvider';\n", "import type { RoutingOptions } from '@clerk/types';\n\nimport { errorThrower } from '../errors/errorThrower';\nimport { incompatibleRoutingWithPathProvidedError, noPathProvidedError } from '../errors/messages';\n\nexport function useRoutingProps<T extends RoutingOptions>(\n  componentName: string,\n  props: T,\n  routingOptions?: RoutingOptions,\n): T {\n  const path = props.path || routingOptions?.path;\n  const routing = props.routing || routingOptions?.routing || 'path';\n\n  if (routing === 'path') {\n    if (!path) {\n      return errorThrower.throw(noPathProvidedError(componentName));\n    }\n\n    return {\n      ...routingOptions,\n      ...props,\n      routing: 'path',\n    };\n  }\n\n  if (props.path) {\n    return errorThrower.throw(incompatibleRoutingWithPathProvidedError(componentName));\n  }\n\n  return {\n    ...routingOptions,\n    ...props,\n    path: undefined,\n  };\n}\n", "export { setErrorThrowerOptions } from './errors/errorThrower';\nexport { MultisessionAppSupport } from './components/controlComponents';\nexport { useRoutingProps } from './hooks/useRoutingProps';\nexport { useDerivedAuth } from './hooks/useAuth';\n\nexport {\n  clerkJsScriptUrl,\n  buildClerkJsScriptAttributes,\n  setClerkJsLoadingErrorPackageName,\n} from '@clerk/shared/loadClerkJsScript';\n", "import {\n  OrganizationList as BaseOrganizationList,\n  OrganizationProfile as BaseOrganizationProfile,\n  SignIn as BaseSignIn,\n  SignUp as BaseSignUp,\n  UserProfile as BaseUserProfile,\n} from '@clerk/clerk-react';\nimport { useRoutingProps } from '@clerk/clerk-react/internal';\nimport type { OrganizationProfileProps, SignInProps, SignUpProps, UserProfileProps } from '@clerk/types';\nimport { useLocation, useParams } from '@tanstack/react-router';\n\nconst usePathnameWithoutSplatRouteParams = () => {\n  const { _splat } = useParams({\n    strict: false,\n  });\n  const { pathname } = useLocation();\n\n  // Get the splat route params\n  // TanStack Router uses _splat to represent the splat route params\n  const splatRouteParam = _splat || '';\n\n  // Remove the splat route param from the pathname\n  // so we end up with the pathname where the components are mounted at\n  // eg /user/123/profile/security will return /user/123/profile as the path\n  const path = pathname.replace(splatRouteParam, '').replace(/\\/$/, '').replace(/^\\//, '').trim();\n\n  return `/${path}`;\n};\n\n// The assignment of UserProfile with BaseUserProfile props is used\n// to support the CustomPage functionality (eg UserProfile.Page)\n// Also the `typeof BaseUserProfile` is used to resolved the following error:\n// \"The inferred type of 'UserProfile' cannot be named without a reference to ...\"\nexport const UserProfile: typeof BaseUserProfile = Object.assign(\n  (props: UserProfileProps) => {\n    const path = usePathnameWithoutSplatRouteParams();\n    return <BaseUserProfile {...useRoutingProps('UserProfile', props, { path })} />;\n  },\n  { ...BaseUserProfile },\n);\n\n// The assignment of OrganizationProfile with BaseOrganizationProfile props is used\n// to support the CustomPage functionality (eg OrganizationProfile.Page)\n// Also the `typeof BaseOrganizationProfile` is used to resolved the following error:\n// \"The inferred type of 'OrganizationProfile' cannot be named without a reference to ...\"\nexport const OrganizationProfile: typeof BaseOrganizationProfile = Object.assign(\n  (props: OrganizationProfileProps) => {\n    const path = usePathnameWithoutSplatRouteParams();\n    return <BaseOrganizationProfile {...useRoutingProps('OrganizationProfile', props, { path })} />;\n  },\n  { ...BaseOrganizationProfile },\n);\n\nexport const OrganizationList: typeof BaseOrganizationList = Object.assign(\n  (props: OrganizationProfileProps) => {\n    const path = usePathnameWithoutSplatRouteParams();\n    return <BaseOrganizationList {...useRoutingProps('OrganizationList', props, { path })} />;\n  },\n  { ...BaseOrganizationList },\n);\n\nexport const SignIn = (props: SignInProps) => {\n  const path = usePathnameWithoutSplatRouteParams();\n  return <BaseSignIn {...useRoutingProps('SignIn', props, { path })} />;\n};\n\nexport const SignUp = (props: SignUpProps) => {\n  const path = usePathnameWithoutSplatRouteParams();\n  return <BaseSignUp {...useRoutingProps('SignUp', props, { path })} />;\n};\n", "import { warnPackageRenaming } from './utils/errors';\n\nwarnPackageRenaming();\n\nexport * from './client/index';\n\n// Override Clerk React error thrower to show that errors come from @clerk/tanstack-start\nimport { setErrorThrowerOptions } from '@clerk/clerk-react/internal';\nsetErrorThrowerOptions({ packageName: PACKAGE_NAME });\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAM,qBAAqB,CAAC,QAAgB;AACnC,SAAA,aAAa,IAAI,KAAA,CAAM;;;;;;AAMhC;AAEO,IAAM,8BAA8B,mBAAmB;;;;;;;;GAQ3D;AAEI,IAAM,4BAA4B,mBAAmB;;;;;;KAMvD;AAEE,IAAM,sBAAsB,MAAM;AAC/B,UAAA;IACN;EAAA;AAEJ;A;;;;;AC7Ba,IAAA,WAAW,MAAM,OAAO,WAAW;AAIzC,IAAMA,gBAAe,kBAAkB;EAC5C,aAAa;AACf,CAAC;;;;;ACFD,IAAM,kBAAkB,aAAAC,QAAM,cAAwD,MAAS;AAC/F,gBAAgB,cAAc;AAOxB,IAAA,uBAAuB,CAAC,UAAmE;AACzF,QAAA,EAAE,UAAU,QAAA,IAAY;AACvB,aAAA,wBAAC,gBAAgB,UAAhB,EAAyB,OAAO,EAAE,OAAO,QAAQ,GAAI,SAAS,CAAA;AACxE;;;;ACXO,IAAM,uBAAuB,MAAM;AACxC,QAAM,WAAW,YAAY;AAC7B,QAAM,WAAW,YAAY;AAC7B,QAAM,sBAAsB,cAAAC,QAAM,OAAkB,CAAA,CAAE;AACtD,QAAM,aAAa,MAAM;AACvB,wBAAoB,QAAQ,QAAQ,CAAW,YAAA,QAAA,CAAS;AACxD,wBAAoB,QAAQ,OAAO,GAAG,oBAAoB,QAAQ,MAAM;EAAA;AAE1E,QAAM,CAAC,GAAG,eAAe,QAAI,6BAAc;AAE3C,gBAAAA,QAAM,UAAU,MAAM;AACT,eAAA;EAAA,GACV,CAAC,QAAQ,CAAC;AAEb,SAAO,CAAC,YAA6B;AAC5B,WAAA,IAAI,QAAQ,CAAO,QAAA;AACxB,sBAAgB,MAAM;AACA,4BAAA,QAAQ,KAAK,GAAG;AAChC,YAAA,SAAS,OAAO,CAAC;MAAA,CACtB;IAAA,CACF;EAAA;AAEL;;;AC1BA,IAAM,4BAA4B,CAAC,YAA2D;;AAC5F,SAAO,CAAC,GAAC,wCAAS,eAAT,mBAAqB;AAChC;AAEA,IAAM,uBAAuB,CAAC,YAA2C;AACvE,SAAO,CAAC,EAAC,mCAAS;AACpB;AAQO,IAAM,iBAAiB,CAAC,MAAc,YAA0C;AAErF,MAAI,OAAO,YAAY,eAAe,QAAQ,OAAO,OAAO,QAAQ,IAAI,IAAI,MAAM,UAAU;AAC1F,WAAO,QAAQ,IAAI,IAAI;EACzB;AAGA,MAAI,OAAO,gBAAgB,eAAe,YAAY,OAAO,OAAO,YAAY,IAAI,IAAI,MAAM,UAAU;AACtG,WAAO,YAAY,IAAI,IAAI;EAC7B;AAEA,MAAI,0BAA0B,OAAO,GAAG;AACtC,WAAO,QAAQ,WAAW,IAAI,IAAI,KAAK;EACzC;AAGA,MAAI,qBAAqB,OAAO,GAAG;AACjC,WAAO,QAAQ,IAAI,IAAI,KAAK;EAC9B;AAGA,MAAI,WAAW,OAAO,QAAQ,IAAI,MAAM,UAAU;AAChD,WAAO,QAAQ,IAAI;EACrB;AAGA,MAAI;AACF,WAAO,WAAW,IAA+B;EACnD,QAAQ;EAER;AAEA,SAAO;AACT;;;AC7Ca,IAAA,wBAAwB,CAAC,YAA6B;AAC3D,QAAA,WAAW,CAAC,SAAyB;AAClC,WAAA,eAAe,QAAQ,IAAI,IAAI,OAAO,KAAK,eAAe,MAAM,OAAO;EAAA;AAGzE,SAAA;IACL,gBAAgB,SAAS,uBAAuB;IAChD,QAAQ,SAAS,cAAc;IAC/B,aAAa,SAAS,SAAS,oBAAoB,CAAC;IACpD,UAAU,SAAS,iBAAiB;IACpC,WAAW,SAAS,mBAAmB;IACvC,WAAW,SAAS,mBAAmB;IACvC,YAAY,SAAS,cAAc,KAAK,SAAS,UAAU;IAC3D,gBAAgB,SAAS,kBAAkB;IAC3C,gBAAgB,SAAS,kBAAkB;IAC3C,mBAAmB,SAAS,SAAS,0BAA0B,CAAC;IAChE,gBAAgB,SAAS,SAAS,uBAAuB,CAAC;IAC1D,gBAAgB,SAAS,yBAAyB;IAClD,gBAAgB,SAAS,yBAAyB;EAAA;AAEtD;;;ACnBa,IAAA,yBAAyB,CACpC,mBAGG;AACG,QAAA;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,IACE,kBAAkB,CAAA;AAEf,SAAA;IACL,eAAe;IACf,gBAAgB;IAChB,UAAU;IACV,QAAQ;IACR,aAAa,CAAC,CAAC;IACf,WAAW;IACX,WAAW;IACX,gBAAgB;IAChB,gBAAgB;IAChB,YAAY;IACZ,gBAAgB;IAChB,WAAW;MACT,UAAU;MACV,OAAO;IAAA;IAET,wBAAwB;IACxB,wBAAwB;IACxB,2BAA2B;IAC3B,2BAA2B;EAAA;AAE/B;AAEa,IAAA,sBAAsB,CAAC,kBAAuB;AAClD,SAAA;IACL,GAAG;IACH,gBAAgB,cAAc,kBAAkB,sBAAA,EAAwB;IACxE,QAAQ,cAAc,UAAU,sBAAA,EAAwB;IACxD,aAAa,cAAc,eAAe,sBAAA,EAAwB;IAClE,WAAW,cAAc,aAAa,sBAAA,EAAwB;IAC9D,WAAW,cAAc,aAAa,sBAAA,EAAwB;IAC9D,gBAAgB,cAAc,kBAAkB,sBAAA,EAAwB;IACxE,gBAAgB,cAAc,kBAAkB,sBAAA,EAAwB;IACxE,YAAY,cAAc,cAAc,sBAAA,EAAwB;IAChE,gBAAgB,cAAc,kBAAkB,sBAAA,EAAwB;IACxE,wBAAwB,cAAc;IACtC,gBAAgB,cAAc,kBAAkB,sBAAA,EAAwB;EAAA;AAE5E;;;;ACxDA,IAAM,eAAe;EACnB,MAAM;EACN,SAAS;AACX;AAEA,IAAM,uBAAyF,EAAE,SAAS,OAAU;AAE7G,SAASC,eAAc,EAAE,UAAU,GAAG,cAAA,GAA+D;AAC1G,QAAM,oBAAoB,qBAAqB;AAC/C,QAAM,gBAAgB,gBAAgB;IACpC,QAAQ;EAAA,CACT;AAED,+BAAU,MAAM;AACd,yBAAqB,UAAU;EAAA,GAC9B,CAAC,iBAAiB,CAAC;AAEtB,QAAM,iBAAiB,SAAA,IAAc,OAAe,qBAAqB,+CAAe;AAExF,QAAM,EAAE,eAAe,GAAG,cAAA,IAAkB,uBAAuB,iDAAgB,sBAAsB;AAEzG,QAAM,cAAc;IAClB,GAAG,oBAAoB,aAAa;IACpC,GAAG;EAAA;AAGL,aAEI,0BAAA,8BAAA,EAAA,UAAA;QAAA,yBAAC,YAAA,EAAY,UAA+B,+BAAA,KAAK,UAAU,+CAAe,iBAAiB,CAAC,IAAI,CAAA;QAChG,yBAAC,sBAAqB,EAAA,SAAS,aAC7B,cAAA;MAACC;MAAA;QACC,cAAc;QACd,aAAa;QACb,YAAY,CAAC,OACX;;AAAA,4CAAqB,YAArB,8CAA+B;YAC7B;YACA,SAAS;UAAA;;QAGb,eAAe,CAAC,OACd;;AAAA,4CAAqB,YAArB,8CAA+B;YAC7B;YACA,SAAS;UAAA;;QAGZ,GAAG;QAEH;MAAA;IAAA,EAEL,CAAA;EAAA,EACF,CAAA;AAEJ;AACAD,eAAc,cAAc;;;AC5DrB,SAAS,gBACd,eACA,OACA,gBACG;AACH,QAAM,OAAO,MAAM,SAAQ,kBAAA,OAAA,SAAA,eAAgB;AAC3C,QAAM,UAAU,MAAM,YAAW,kBAAA,OAAA,SAAA,eAAgB,YAAW;AAE5D,MAAI,YAAY,QAAQ;AACtB,QAAI,CAAC,MAAM;AACT,aAAO,aAAa,MAAM,oBAAoB,aAAa,CAAC;IAC9D;AAEA,WAAO;MACL,GAAG;MACH,GAAG;MACH,SAAS;IACX;EACF;AAEA,MAAI,MAAM,MAAM;AACd,WAAO,aAAa,MAAM,yCAAyC,aAAa,CAAC;EACnF;AAEA,SAAO;IACL,GAAG;IACH,GAAG;IACH,MAAM;EACR;AACF;;;;AEvBA,IAAM,qCAAqC,MAAM;AACzC,QAAA,EAAE,OAAO,IAAI,UAAU;IAC3B,QAAQ;EAAA,CACT;AACK,QAAA,EAAE,SAAS,IAAI,YAAY;AAIjC,QAAM,kBAAkB,UAAU;AAKlC,QAAM,OAAO,SAAS,QAAQ,iBAAiB,EAAE,EAAE,QAAQ,OAAO,EAAE,EAAE,QAAQ,OAAO,EAAE,EAAE,KAAK;AAE9F,SAAO,IAAI,IAAI;AACjB;AAMO,IAAME,eAAsC,OAAO;EACxD,CAAC,UAA4B;AAC3B,UAAM,OAAO,mCAAmC;AACzC,eAAA,yBAACC,aAAAA,EAAiB,GAAG,gBAAgB,eAAe,OAAO,EAAE,KAAK,CAAC,EAAG,CAAA;EAAA;EAE/E,EAAE,GAAGA,YAAgB;AACvB;AAMO,IAAMC,uBAAsD,OAAO;EACxE,CAAC,UAAoC;AACnC,UAAM,OAAO,mCAAmC;AACzC,eAAA,yBAACC,qBAAAA,EAAyB,GAAG,gBAAgB,uBAAuB,OAAO,EAAE,KAAK,CAAC,EAAG,CAAA;EAAA;EAE/F,EAAE,GAAGA,oBAAwB;AAC/B;AAEO,IAAMC,oBAAgD,OAAO;EAClE,CAAC,UAAoC;AACnC,UAAM,OAAO,mCAAmC;AACzC,eAAA,yBAACC,kBAAAA,EAAsB,GAAG,gBAAgB,oBAAoB,OAAO,EAAE,KAAK,CAAC,EAAG,CAAA;EAAA;EAEzF,EAAE,GAAGA,iBAAqB;AAC5B;AAEa,IAAAC,UAAS,CAAC,UAAuB;AAC5C,QAAM,OAAO,mCAAmC;AACzC,aAAA,yBAACC,QAAAA,EAAY,GAAG,gBAAgB,UAAU,OAAO,EAAE,KAAK,CAAC,EAAG,CAAA;AACrE;AAEa,IAAAC,UAAS,CAAC,UAAuB;AAC5C,QAAM,OAAO,mCAAmC;AACzC,aAAA,yBAACC,QAAAA,EAAY,GAAG,gBAAgB,UAAU,OAAO,EAAE,KAAK,CAAC,EAAG,CAAA;AACrE;;;ACnEA,oBAAoB;AAMpB,uBAAuB,EAAE,aAAa,wBAAA,CAAc;",
  "names": ["errorThrower", "React", "React", "ClerkProvider", "ReactClerkProvider", "UserProfile", "BaseUserProfile", "OrganizationProfile", "BaseOrganizationProfile", "OrganizationList", "BaseOrganizationList", "SignIn", "BaseSignIn", "SignUp", "BaseSignUp"]
}
