import {
  AuthenticateWithRedirectCallback,
  ClerkLoaded,
  ClerkLoading,
  ClerkProvider,
  CreateOrganization,
  GoogleOneTap,
  OrganizationList,
  OrganizationProfile,
  OrganizationSwitcher,
  Protect,
  RedirectToCreateOrganization,
  RedirectToOrganizationProfile,
  RedirectToSignIn,
  RedirectToSignUp,
  RedirectToUserProfile,
  SignIn,
  SignInButton,
  SignInWithMetamaskButton,
  SignOutButton,
  SignUp,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
  UserProfile,
  Waitlist,
  buildErrorThrower,
  errorThrower,
  incompatibleRoutingWithPathProvidedError,
  isTruthy,
  noPathProvidedError,
  setErrorThrowerOptions,
  useAuth,
  useClerk,
  useEmailLink,
  useOrganization,
  useOrganizationList,
  useReverification,
  useSession,
  useSessionList,
  useSignIn,
  useSignUp,
  useUser
} from "./chunk-PFIQKNJY.js";
import {
  ScriptOnce,
  useLocation,
  useNavigate,
  useParams,
  useRouteContext
} from "./chunk-UATX273P.js";
import "./chunk-ESPZTEVQ.js";
import "./chunk-K2ZHHHIO.js";
import "./chunk-55CYGAVW.js";
import "./chunk-3E6HATBP.js";
import {
  require_jsx_runtime
} from "./chunk-UTKSFBET.js";
import {
  require_react
} from "./chunk-VGGGMLVJ.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@clerk/tanstack-start/dist/utils/errors.js
var createErrorMessage = (msg) => {
  return `ðŸ”’ Clerk: ${msg.trim()}

For more info, check out the docs: https://clerk.com/docs,
or come say hi in our discord server: https://clerk.com/discord

`;
};
var noFetchFnCtxPassedInGetAuth = createErrorMessage(`
  You're calling 'getAuth()' from a server function, without providing the ctx object.
  Example:

  export const someServerFunction = createServerFn('GET', async (_payload, ctx) => {
    const auth = getAuth(ctx);
    ...
  });
  `);
var clerkHandlerNotConfigured = createErrorMessage(`
It looks like you're trying to use Clerk without configuring the Clerk handler.

To fix this, make sure you have the \`clerkHandler()\` configure in you SSR entry file (example: app/ssr.tsx).

For more info, check out the docs: https://github.com/clerk/javascript/tree/main/packages/tanstack-start#setup-clerkhandler-in-the-ssr-entrypoint,
    `);
var warnPackageRenaming = () => {
  console.warn(
    "[@clerk/tanstack-start] Warning: This package has moved to @clerk/tanstack-react-start. Please switch to the new package, as this is the last release under this package name."
  );
};

// node_modules/@clerk/tanstack-start/dist/client/ClerkProvider.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/@clerk/tanstack-start/dist/utils/index.js
var isClient = () => typeof window !== "undefined";
var errorThrower2 = buildErrorThrower({
  packageName: "@clerk/tanstack-start"
});

// node_modules/@clerk/tanstack-start/dist/client/OptionsContext.js
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var ClerkOptionsCtx = import_react.default.createContext(void 0);
ClerkOptionsCtx.displayName = "ClerkOptionsCtx";
var ClerkOptionsProvider = (props) => {
  const { children, options } = props;
  return (0, import_jsx_runtime.jsx)(ClerkOptionsCtx.Provider, { value: { value: options }, children });
};

// node_modules/@clerk/tanstack-start/dist/client/useAwaitableNavigate.js
var import_react2 = __toESM(require_react(), 1);
var useAwaitableNavigate = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const resolveFunctionsRef = import_react2.default.useRef([]);
  const resolveAll = () => {
    resolveFunctionsRef.current.forEach((resolve) => resolve());
    resolveFunctionsRef.current.splice(0, resolveFunctionsRef.current.length);
  };
  const [_, startTransition] = (0, import_react2.useTransition)();
  import_react2.default.useEffect(() => {
    resolveAll();
  }, [location]);
  return (options) => {
    return new Promise((res) => {
      startTransition(() => {
        resolveFunctionsRef.current.push(res);
        res(navigate(options));
      });
    });
  };
};

// node_modules/@clerk/shared/dist/chunk-TALGHI24.mjs
var hasCloudflareProxyContext = (context) => {
  var _a;
  return !!((_a = context == null ? void 0 : context.cloudflare) == null ? void 0 : _a.env);
};
var hasCloudflareContext = (context) => {
  return !!(context == null ? void 0 : context.env);
};
var getEnvVariable = (name, context) => {
  if (typeof process !== "undefined" && process.env && typeof process.env[name] === "string") {
    return process.env[name];
  }
  if (typeof import.meta !== "undefined" && import.meta.env && typeof import.meta.env[name] === "string") {
    return import.meta.env[name];
  }
  if (hasCloudflareProxyContext(context)) {
    return context.cloudflare.env[name] || "";
  }
  if (hasCloudflareContext(context)) {
    return context.env[name] || "";
  }
  if (context && typeof context[name] === "string") {
    return context[name];
  }
  try {
    return globalThis[name];
  } catch {
  }
  return "";
};

// node_modules/@clerk/tanstack-start/dist/utils/env.js
var getPublicEnvVariables = (context) => {
  const getValue = (name) => {
    return getEnvVariable(`VITE_${name}`, context) || getEnvVariable(name, context);
  };
  return {
    publishableKey: getValue("CLERK_PUBLISHABLE_KEY"),
    domain: getValue("CLERK_DOMAIN"),
    isSatellite: isTruthy(getValue("CLERK_IS_SATELLITE")),
    proxyUrl: getValue("CLERK_PROXY_URL"),
    signInUrl: getValue("CLERK_SIGN_IN_URL"),
    signUpUrl: getValue("CLERK_SIGN_UP_URL"),
    clerkJsUrl: getValue("CLERK_JS_URL") || getValue("CLERK_JS"),
    clerkJsVariant: getValue("CLERK_JS_VARIANT"),
    clerkJsVersion: getValue("CLERK_JS_VERSION"),
    telemetryDisabled: isTruthy(getValue("CLERK_TELEMETRY_DISABLED")),
    telemetryDebug: isTruthy(getValue("CLERK_TELEMETRY_DEBUG")),
    afterSignInUrl: getValue("CLERK_AFTER_SIGN_IN_URL"),
    afterSignUpUrl: getValue("CLERK_AFTER_SIGN_UP_URL")
  };
};

// node_modules/@clerk/tanstack-start/dist/client/utils.js
var pickFromClerkInitState = (clerkInitState) => {
  const {
    __clerk_ssr_state,
    __publishableKey,
    __proxyUrl,
    __domain,
    __isSatellite,
    __signInUrl,
    __signUpUrl,
    __afterSignInUrl,
    __afterSignUpUrl,
    __clerkJSUrl,
    __clerkJSVersion,
    __telemetryDisabled,
    __telemetryDebug,
    __signInForceRedirectUrl,
    __signUpForceRedirectUrl,
    __signInFallbackRedirectUrl,
    __signUpFallbackRedirectUrl
  } = clerkInitState || {};
  return {
    clerkSsrState: __clerk_ssr_state,
    publishableKey: __publishableKey,
    proxyUrl: __proxyUrl,
    domain: __domain,
    isSatellite: !!__isSatellite,
    signInUrl: __signInUrl,
    signUpUrl: __signUpUrl,
    afterSignInUrl: __afterSignInUrl,
    afterSignUpUrl: __afterSignUpUrl,
    clerkJSUrl: __clerkJSUrl,
    clerkJSVersion: __clerkJSVersion,
    telemetry: {
      disabled: __telemetryDisabled,
      debug: __telemetryDebug
    },
    signInForceRedirectUrl: __signInForceRedirectUrl,
    signUpForceRedirectUrl: __signUpForceRedirectUrl,
    signInFallbackRedirectUrl: __signInFallbackRedirectUrl,
    signUpFallbackRedirectUrl: __signUpFallbackRedirectUrl
  };
};
var mergeWithPublicEnvs = (restInitState) => {
  return {
    ...restInitState,
    publishableKey: restInitState.publishableKey || getPublicEnvVariables().publishableKey,
    domain: restInitState.domain || getPublicEnvVariables().domain,
    isSatellite: restInitState.isSatellite || getPublicEnvVariables().isSatellite,
    signInUrl: restInitState.signInUrl || getPublicEnvVariables().signInUrl,
    signUpUrl: restInitState.signUpUrl || getPublicEnvVariables().signUpUrl,
    afterSignInUrl: restInitState.afterSignInUrl || getPublicEnvVariables().afterSignInUrl,
    afterSignUpUrl: restInitState.afterSignUpUrl || getPublicEnvVariables().afterSignUpUrl,
    clerkJSUrl: restInitState.clerkJSUrl || getPublicEnvVariables().clerkJsUrl,
    clerkJSVersion: restInitState.clerkJSVersion || getPublicEnvVariables().clerkJsVersion,
    signInForceRedirectUrl: restInitState.signInForceRedirectUrl,
    clerkJSVariant: restInitState.clerkJSVariant || getPublicEnvVariables().clerkJsVariant
  };
};

// node_modules/@clerk/tanstack-start/dist/client/ClerkProvider.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var SDK_METADATA = {
  name: "@clerk/tanstack-start",
  version: "0.11.5"
};
var awaitableNavigateRef = { current: void 0 };
function ClerkProvider2({ children, ...providerProps }) {
  const awaitableNavigate = useAwaitableNavigate();
  const routerContext = useRouteContext({
    strict: false
  });
  (0, import_react3.useEffect)(() => {
    awaitableNavigateRef.current = awaitableNavigate;
  }, [awaitableNavigate]);
  const clerkInitState = isClient() ? window.__clerk_init_state : routerContext == null ? void 0 : routerContext.clerkInitialState;
  const { clerkSsrState, ...restInitState } = pickFromClerkInitState(clerkInitState == null ? void 0 : clerkInitState.__internal_clerk_state);
  const mergedProps = {
    ...mergeWithPublicEnvs(restInitState),
    ...providerProps
  };
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
    (0, import_jsx_runtime2.jsx)(ScriptOnce, { children: `window.__clerk_init_state = ${JSON.stringify(routerContext == null ? void 0 : routerContext.clerkInitialState)};` }),
    (0, import_jsx_runtime2.jsx)(ClerkOptionsProvider, { options: mergedProps, children: (0, import_jsx_runtime2.jsx)(
      ClerkProvider,
      {
        initialState: clerkSsrState,
        sdkMetadata: SDK_METADATA,
        routerPush: (to) => {
          var _a;
          return (_a = awaitableNavigateRef.current) == null ? void 0 : _a.call(awaitableNavigateRef, {
            to,
            replace: false
          });
        },
        routerReplace: (to) => {
          var _a;
          return (_a = awaitableNavigateRef.current) == null ? void 0 : _a.call(awaitableNavigateRef, {
            to,
            replace: true
          });
        },
        ...mergedProps,
        children
      }
    ) })
  ] });
}
ClerkProvider2.displayName = "ClerkProvider";

// node_modules/@clerk/clerk-react/dist/internal.mjs
function useRoutingProps(componentName, props, routingOptions) {
  const path = props.path || (routingOptions == null ? void 0 : routingOptions.path);
  const routing = props.routing || (routingOptions == null ? void 0 : routingOptions.routing) || "path";
  if (routing === "path") {
    if (!path) {
      return errorThrower.throw(noPathProvidedError(componentName));
    }
    return {
      ...routingOptions,
      ...props,
      routing: "path"
    };
  }
  if (props.path) {
    return errorThrower.throw(incompatibleRoutingWithPathProvidedError(componentName));
  }
  return {
    ...routingOptions,
    ...props,
    path: void 0
  };
}

// node_modules/@clerk/tanstack-start/dist/client/uiComponents.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var usePathnameWithoutSplatRouteParams = () => {
  const { _splat } = useParams({
    strict: false
  });
  const { pathname } = useLocation();
  const splatRouteParam = _splat || "";
  const path = pathname.replace(splatRouteParam, "").replace(/\/$/, "").replace(/^\//, "").trim();
  return `/${path}`;
};
var UserProfile2 = Object.assign(
  (props) => {
    const path = usePathnameWithoutSplatRouteParams();
    return (0, import_jsx_runtime3.jsx)(UserProfile, { ...useRoutingProps("UserProfile", props, { path }) });
  },
  { ...UserProfile }
);
var OrganizationProfile2 = Object.assign(
  (props) => {
    const path = usePathnameWithoutSplatRouteParams();
    return (0, import_jsx_runtime3.jsx)(OrganizationProfile, { ...useRoutingProps("OrganizationProfile", props, { path }) });
  },
  { ...OrganizationProfile }
);
var OrganizationList2 = Object.assign(
  (props) => {
    const path = usePathnameWithoutSplatRouteParams();
    return (0, import_jsx_runtime3.jsx)(OrganizationList, { ...useRoutingProps("OrganizationList", props, { path }) });
  },
  { ...OrganizationList }
);
var SignIn2 = (props) => {
  const path = usePathnameWithoutSplatRouteParams();
  return (0, import_jsx_runtime3.jsx)(SignIn, { ...useRoutingProps("SignIn", props, { path }) });
};
var SignUp2 = (props) => {
  const path = usePathnameWithoutSplatRouteParams();
  return (0, import_jsx_runtime3.jsx)(SignUp, { ...useRoutingProps("SignUp", props, { path }) });
};

// node_modules/@clerk/tanstack-start/dist/index.js
warnPackageRenaming();
setErrorThrowerOptions({ packageName: "@clerk/tanstack-start" });
export {
  AuthenticateWithRedirectCallback,
  ClerkLoaded,
  ClerkLoading,
  ClerkProvider2 as ClerkProvider,
  CreateOrganization,
  GoogleOneTap,
  OrganizationList2 as OrganizationList,
  OrganizationProfile2 as OrganizationProfile,
  OrganizationSwitcher,
  Protect,
  RedirectToCreateOrganization,
  RedirectToOrganizationProfile,
  RedirectToSignIn,
  RedirectToSignUp,
  RedirectToUserProfile,
  SignIn2 as SignIn,
  SignInButton,
  SignInWithMetamaskButton,
  SignOutButton,
  SignUp2 as SignUp,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
  UserProfile2 as UserProfile,
  Waitlist,
  useAuth,
  useClerk,
  useEmailLink,
  useOrganization,
  useOrganizationList,
  useReverification,
  useSession,
  useSessionList,
  useSignIn,
  useSignUp,
  useUser
};
//# sourceMappingURL=@clerk_tanstack-start.js.map
