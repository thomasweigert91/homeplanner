{"version":3,"file":"index.cjs","sources":["../../src/index.ts"],"sourcesContent":["import { fileURLToPath, pathToFileURL } from 'node:url'\n\nimport { logDiff } from '@tanstack/router-utils'\nimport { compileDirectives } from './compilers'\nimport type { CompileDirectivesOpts, DirectiveFn } from './compilers'\nimport type { Plugin } from 'vite'\n\nconst debug =\n  process.env.TSR_VITE_DEBUG &&\n  ['true', 'directives-functions-plugin'].includes(process.env.TSR_VITE_DEBUG)\n\nexport type {\n  DirectiveFn,\n  CompileDirectivesOpts,\n  ReplacerFn,\n} from './compilers'\n\nexport type DirectiveFunctionsViteOptions = Pick<\n  CompileDirectivesOpts,\n  'directive' | 'directiveLabel' | 'getRuntimeCode' | 'replacer'\n  // | 'devSplitImporter'\n> & {\n  envLabel: string\n}\n\nconst createDirectiveRx = (directive: string) =>\n  new RegExp(`\"${directive}\"|'${directive}'`, 'gm')\n\nexport function TanStackDirectiveFunctionsPlugin(\n  opts: DirectiveFunctionsViteOptions & {\n    onDirectiveFnsById?: (directiveFnsById: Record<string, DirectiveFn>) => void\n  },\n): Plugin {\n  let ROOT: string = process.cwd()\n\n  const directiveRx = createDirectiveRx(opts.directive)\n\n  return {\n    name: 'tanstack-start-directive-vite-plugin',\n    enforce: 'pre',\n    configResolved: (config) => {\n      ROOT = config.root\n    },\n    transform(code, id) {\n      const url = pathToFileURL(id)\n      url.searchParams.delete('v')\n      id = fileURLToPath(url).replace(/\\\\/g, '/')\n\n      if (!code.match(directiveRx)) {\n        return null\n      }\n\n      if (debug) console.info(`${opts.envLabel}: Compiling Directives: `, id)\n\n      const { compiledResult, directiveFnsById } = compileDirectives({\n        ...opts,\n        code,\n        root: ROOT,\n        filename: id,\n        // globalThis.app currently refers to Vinxi's app instance. In the future, it can just be the\n        // vite dev server instance we get from Nitro.\n      })\n\n      opts.onDirectiveFnsById?.(directiveFnsById)\n\n      if (debug) {\n        logDiff(code, compiledResult.code)\n        console.log('Output:\\n', compiledResult.code + '\\n\\n')\n      }\n\n      return compiledResult\n    },\n  }\n}\n"],"names":["pathToFileURL","fileURLToPath","compileDirectives","logDiff"],"mappings":";;;;;AAOA,MAAM,QACJ,QAAQ,IAAI,kBACZ,CAAC,QAAQ,6BAA6B,EAAE,SAAS,QAAQ,IAAI,cAAc;AAgB7E,MAAM,oBAAoB,CAAC,cACzB,IAAI,OAAO,IAAI,SAAS,MAAM,SAAS,KAAK,IAAI;AAE3C,SAAS,iCACd,MAGQ;AACJ,MAAA,OAAe,QAAQ,IAAI;AAEzB,QAAA,cAAc,kBAAkB,KAAK,SAAS;AAE7C,SAAA;AAAA,IACL,MAAM;AAAA,IACN,SAAS;AAAA,IACT,gBAAgB,CAAC,WAAW;AAC1B,aAAO,OAAO;AAAA,IAChB;AAAA,IACA,UAAU,MAAM,IAAI;;AACZ,YAAA,MAAMA,uBAAc,EAAE;AACxB,UAAA,aAAa,OAAO,GAAG;AAC3B,WAAKC,SAAc,cAAA,GAAG,EAAE,QAAQ,OAAO,GAAG;AAE1C,UAAI,CAAC,KAAK,MAAM,WAAW,GAAG;AACrB,eAAA;AAAA,MAAA;AAGT,UAAI,MAAe,SAAA,KAAK,GAAG,KAAK,QAAQ,4BAA4B,EAAE;AAEtE,YAAM,EAAE,gBAAgB,iBAAiB,IAAIC,4BAAkB;AAAA,QAC7D,GAAG;AAAA,QACH;AAAA,QACA,MAAM;AAAA,QACN,UAAU;AAAA;AAAA;AAAA,MAAA,CAGX;AAED,iBAAK,uBAAL,8BAA0B;AAE1B,UAAI,OAAO;AACDC,4BAAA,MAAM,eAAe,IAAI;AACjC,gBAAQ,IAAI,aAAa,eAAe,OAAO,MAAM;AAAA,MAAA;AAGhD,aAAA;AAAA,IAAA;AAAA,EAEX;AACF;;"}