"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const node_url = require("node:url");
const path = require("node:path");
const node_fs = require("node:fs");
const routerUtils = require("@tanstack/router-utils");
const compilers = require("./compilers.cjs");
const debug = process.env.TSR_VITE_DEBUG && ["true", "react-start-plugin"].includes(process.env.TSR_VITE_DEBUG);
const transformFuncs = [
  "createServerFn",
  "createMiddleware",
  "serverOnly",
  "clientOnly",
  "createIsomorphicFn"
];
const tokenRegex = new RegExp(transformFuncs.join("|"));
function createTanStackStartPlugin(opts) {
  const globalMiddlewarePlugin = () => {
    let entry = null;
    let resolvedGlobalMiddlewareEntry = null;
    let globalMiddlewareEntryExists = false;
    let ROOT = process.cwd();
    return {
      name: "vite-plugin-tanstack-start-ensure-global-middleware",
      enforce: "pre",
      configResolved: (config) => {
        ROOT = config.root;
        entry = path.resolve(ROOT, config.router.handler);
        resolvedGlobalMiddlewareEntry = path.resolve(
          ROOT,
          opts.globalMiddlewareEntry
        );
        globalMiddlewareEntryExists = node_fs.existsSync(resolvedGlobalMiddlewareEntry);
        if (!entry) {
          throw new Error(
            "@tanstack/react-start-plugin: No server entry found!"
          );
        }
      },
      transform(code, id) {
        if (entry && id.includes(entry)) {
          if (globalMiddlewareEntryExists) {
            return {
              code: `${code}

import '${path.resolve(ROOT, opts.globalMiddlewareEntry)}'`,
              map: null
            };
          }
        }
        return null;
      }
    };
  };
  return {
    client: [
      globalMiddlewarePlugin(),
      TanStackStartServerFnsAndMiddleware({ ...opts, env: "client" })
    ],
    ssr: [
      globalMiddlewarePlugin(),
      TanStackStartServerFnsAndMiddleware({ ...opts, env: "ssr" })
    ],
    server: [
      globalMiddlewarePlugin(),
      TanStackStartServerFnsAndMiddleware({ ...opts, env: "server" })
    ]
  };
}
function TanStackStartServerFnsAndMiddleware(opts) {
  let ROOT = process.cwd();
  return {
    name: "vite-plugin-tanstack-start-create-server-fn",
    enforce: "pre",
    configResolved: (config) => {
      ROOT = config.root;
    },
    transform(code, id) {
      const url = node_url.pathToFileURL(id);
      url.searchParams.delete("v");
      id = node_url.fileURLToPath(url).replace(/\\/g, "/");
      const includesToken = tokenRegex.test(code);
      if (!includesToken) {
        return null;
      }
      if (code.includes("@react-refresh")) {
        throw new Error(
          `We detected that the '@vitejs/plugin-react' was passed before '@tanstack/react-start-plugin'. Please make sure that '@tanstack/router-vite-plugin' is passed before '@vitejs/plugin-react' and try again: 
e.g.

plugins: [
  TanStackStartVite(), // Place this before viteReact()
  viteReact(),
]
`
        );
      }
      if (debug) console.info(`${opts.env} Compiling Start: `, id);
      const compiled = compilers.compileStartOutput({
        code,
        root: ROOT,
        filename: id,
        env: opts.env
      });
      if (debug) {
        routerUtils.logDiff(code, compiled.code);
        console.log("Output:\n", compiled.code + "\n\n");
      }
      return compiled;
    }
  };
}
exports.TanStackStartServerFnsAndMiddleware = TanStackStartServerFnsAndMiddleware;
exports.createTanStackStartPlugin = createTanStackStartPlugin;
//# sourceMappingURL=index.cjs.map
