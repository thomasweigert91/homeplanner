import { H3Event, appendCorsHeaders as _appendCorsHeaders, appendCorsPreflightHeaders as _appendCorsPreflightHeaders, appendHeader as _appendHeader, appendResponseHeader as _appendResponseHeader, appendResponseHeaders as _appendResponseHeaders, assertMethod as _assertMethod, clearResponseHeaders as _clearResponseHeaders, clearSession as _clearSession, defaultContentType as _defaultContentType, deleteCookie as _deleteCookie, fetchWithEvent as _fetchWithEvent, getCookie as _getCookie, getProxyRequestHeaders as _getProxyRequestHeaders, getQuery as _getQuery, getRequestFingerprint as _getRequestFingerprint, getRequestHeader as _getRequestHeader, getRequestHeaders as _getRequestHeaders, getRequestHost as _getRequestHost, getRequestIP as _getRequestIP, getRequestProtocol as _getRequestProtocol, getRequestURL as _getRequestURL, getRequestWebStream as _getRequestWebStream, getResponseHeader as _getResponseHeader, getResponseHeaders as _getResponseHeaders, getResponseStatus as _getResponseStatus, getResponseStatusText as _getResponseStatusText, getRouterParam as _getRouterParam, getRouterParams as _getRouterParams, getSession as _getSession, getValidatedQuery as _getValidatedQuery, getValidatedRouterParams as _getValidatedRouterParams, handleCacheHeaders as _handleCacheHeaders, handleCors as _handleCors, isMethod as _isMethod, isPreflightRequest as _isPreflightRequest, parseCookies as _parseCookies, proxyRequest as _proxyRequest, readBody as _readBody, readFormData as _readFormData, readMultipartFormData as _readMultipartFormData, readRawBody as _readRawBody, readValidatedBody as _readValidatedBody, removeResponseHeader as _removeResponseHeader, sealSession as _sealSession, send as _send, sendError as _sendError, sendNoContent as _sendNoContent, sendProxy as _sendProxy, sendRedirect as _sendRedirect, sendStream as _sendStream, sendWebResponse as _sendWebResponse, setCookie as _setCookie, setHeader as _setHeader, setResponseHeader as _setResponseHeader, setResponseHeaders as _setResponseHeaders, setResponseStatus as _setResponseStatus, unsealSession as _unsealSession, updateSession as _updateSession, useSession as _useSession, writeEarlyHints as _writeEarlyHints, Encoding, HTTPHeaderName, InferEventInput, _RequestMiddleware, _ResponseMiddleware } from 'h3';
declare function _setContext(event: H3Event, key: string, value: any): void;
declare function _getContext(event: H3Event, key: string): any;
export declare function defineMiddleware(options: {
    onRequest?: _RequestMiddleware | Array<_RequestMiddleware>;
    onBeforeResponse?: _ResponseMiddleware | Array<_ResponseMiddleware>;
}): {
    onRequest?: _RequestMiddleware | Array<_RequestMiddleware>;
    onBeforeResponse?: _ResponseMiddleware | Array<_ResponseMiddleware>;
};
export declare function toWebRequest(event: H3Event): Request | undefined;
export { H3Error, H3Event, MIMES, callNodeListener, createApp, createAppEventHandler, createEvent, createRouter, defineEventHandler, defineLazyEventHandler, defineNodeListener, defineNodeMiddleware, defineRequestMiddleware, defineResponseMiddleware, dynamicEventHandler, defineWebSocket, eventHandler, splitCookiesString, fromNodeMiddleware, fromPlainHandler, fromWebHandler, isError, isEventHandler, isWebResponse, lazyEventHandler, promisifyNodeListener, serveStatic, toEventHandler, toNodeListener, toPlainHandler, toWebHandler, isCorsOriginAllowed, isStream, createError, sanitizeStatusCode, sanitizeStatusMessage, useBase, type AddRouteShortcuts, type App, type AppOptions, type AppUse, type CacheConditions, type CreateRouterOptions, type Duplex, type DynamicEventHandler, type Encoding, type EventHandler, type EventHandlerObject, type EventHandlerRequest, type EventHandlerResponse, type H3CorsOptions, type H3EventContext, type HTTPHeaderName, type HTTPMethod, type InferEventInput, type InputLayer, type InputStack, type Layer, type LazyEventHandler, type Matcher, type MultiPartData, type NodeEventContext, type NodeListener, type NodeMiddleware, type NodePromisifiedHandler, type PlainHandler, type PlainRequest, type PlainResponse, type ProxyOptions, type RequestFingerprintOptions, type RequestHeaders, type RouteNode, type Router, type RouterMethod, type RouterUse, type ServeStaticOptions, type Session, type SessionConfig, type SessionData, type Stack, type StaticAssetMeta, type ValidateFunction, type ValidateResult, type WebEventContext, type WebHandler, type _RequestMiddleware, type _ResponseMiddleware, } from 'h3';
export declare const HTTPEventSymbol: unique symbol;
export declare function isEvent(obj: any): obj is H3Event | {
    [HTTPEventSymbol]: H3Event;
};
type Tail<T> = T extends [any, ...infer U] ? U : never;
type PrependOverload<TOriginal extends (...args: Array<any>) => any, TOverload extends (...args: Array<any>) => any> = TOverload & TOriginal;
type WrapFunction<TFn extends (...args: Array<any>) => any> = PrependOverload<TFn, (...args: Parameters<TFn> extends [H3Event, ...infer TArgs] ? TArgs : Parameters<TFn>) => ReturnType<TFn>>;
type WrappedReadRawBody = <TEncoding extends Encoding = 'utf8'>(...args: Tail<Parameters<typeof _readRawBody<TEncoding>>>) => ReturnType<typeof _readRawBody<TEncoding>>;
export declare const readRawBody: PrependOverload<typeof _readRawBody, WrappedReadRawBody>;
type WrappedReadBody = <T, TEventInput = InferEventInput<'body', H3Event, T>>(...args: Tail<Parameters<typeof _readBody<T, H3Event, TEventInput>>>) => ReturnType<typeof _readBody<T, H3Event, TEventInput>>;
export declare const readBody: PrependOverload<typeof _readBody, WrappedReadBody>;
type WrappedGetQuery = <T, TEventInput = Exclude<InferEventInput<'query', H3Event, T>, undefined>>(...args: Tail<Parameters<typeof _getQuery<T, H3Event, TEventInput>>>) => ReturnType<typeof _getQuery<T, H3Event, TEventInput>>;
export declare const getQuery: PrependOverload<typeof _getQuery, WrappedGetQuery>;
export declare const isMethod: WrapFunction<typeof _isMethod>;
export declare const isPreflightRequest: WrapFunction<typeof _isPreflightRequest>;
type WrappedGetValidatedQuery = <T, TEventInput = InferEventInput<'query', H3Event, T>>(...args: Tail<Parameters<typeof _getValidatedQuery<T, H3Event, TEventInput>>>) => ReturnType<typeof _getValidatedQuery<T, H3Event, TEventInput>>;
export declare const getValidatedQuery: PrependOverload<typeof _getValidatedQuery, WrappedGetValidatedQuery>;
export declare const getRouterParams: WrapFunction<typeof _getRouterParams>;
export declare const getRouterParam: WrapFunction<typeof _getRouterParam>;
type WrappedGetValidatedRouterParams = <T, TEventInput = InferEventInput<'routerParams', H3Event, T>>(...args: Tail<Parameters<typeof _getValidatedRouterParams<T, H3Event, TEventInput>>>) => ReturnType<typeof _getValidatedRouterParams<T, H3Event, TEventInput>>;
export declare const getValidatedRouterParams: PrependOverload<typeof _getValidatedRouterParams, WrappedGetValidatedRouterParams>;
export declare const assertMethod: WrapFunction<typeof _assertMethod>;
export declare const getRequestHeaders: WrapFunction<typeof _getRequestHeaders>;
export declare const getRequestHeader: WrapFunction<typeof _getRequestHeader>;
export declare const getRequestURL: WrapFunction<typeof _getRequestURL>;
export declare const getRequestHost: WrapFunction<typeof _getRequestHost>;
export declare const getRequestProtocol: WrapFunction<typeof _getRequestProtocol>;
export declare const getRequestIP: WrapFunction<typeof _getRequestIP>;
export declare const send: WrapFunction<typeof _send>;
export declare const sendNoContent: WrapFunction<typeof _sendNoContent>;
export declare const setResponseStatus: WrapFunction<typeof _setResponseStatus>;
export declare const getResponseStatus: WrapFunction<typeof _getResponseStatus>;
export declare const getResponseStatusText: WrapFunction<typeof _getResponseStatusText>;
export declare const getResponseHeaders: WrapFunction<typeof _getResponseHeaders>;
export declare const getResponseHeader: WrapFunction<typeof _getResponseHeader>;
export declare const setResponseHeaders: WrapFunction<typeof _setResponseHeaders>;
type WrappedSetResponseHeader = <T extends HTTPHeaderName>(...args: Tail<Parameters<typeof _setResponseHeader<T>>>) => ReturnType<typeof _setResponseHeader<T>>;
export declare const setResponseHeader: PrependOverload<typeof _setResponseHeader, WrappedSetResponseHeader>;
export declare const appendResponseHeaders: WrapFunction<typeof _appendResponseHeaders>;
type WrappedAppendResponseHeader = <T extends HTTPHeaderName>(...args: Tail<Parameters<typeof _appendResponseHeader<T>>>) => ReturnType<typeof _appendResponseHeader<T>>;
export declare const appendResponseHeader: PrependOverload<typeof _appendResponseHeader, WrappedAppendResponseHeader>;
export declare const defaultContentType: WrapFunction<typeof _defaultContentType>;
export declare const sendRedirect: WrapFunction<typeof _sendRedirect>;
export declare const sendStream: WrapFunction<typeof _sendStream>;
export declare const writeEarlyHints: WrapFunction<typeof _writeEarlyHints>;
export declare const sendError: WrapFunction<typeof _sendError>;
export declare const sendProxy: WrapFunction<typeof _sendProxy>;
export declare const proxyRequest: WrapFunction<typeof _proxyRequest>;
type WrappedFetchWithEvent = <T = unknown, TResponse = any, TFetch extends (req: RequestInfo | URL, opts?: any) => any = typeof fetch>(...args: Tail<Parameters<typeof _fetchWithEvent<T, TResponse, TFetch>>>) => ReturnType<typeof _fetchWithEvent<T, TResponse, TFetch>>;
export declare const fetchWithEvent: PrependOverload<typeof _fetchWithEvent, WrappedFetchWithEvent>;
export declare const getProxyRequestHeaders: WrapFunction<typeof _getProxyRequestHeaders>;
export declare const parseCookies: WrapFunction<typeof _parseCookies>;
export declare const getCookie: WrapFunction<typeof _getCookie>;
export declare const setCookie: WrapFunction<typeof _setCookie>;
export declare const deleteCookie: WrapFunction<typeof _deleteCookie>;
type SessionDataT = Record<string, any>;
type WrappedUseSession = <T extends SessionDataT>(...args: Tail<Parameters<typeof _useSession<T>>>) => ReturnType<typeof _useSession<T>>;
export declare const useSession: PrependOverload<typeof _useSession, WrappedUseSession>;
type WrappedGetSession = <T extends SessionDataT>(...args: Tail<Parameters<typeof _getSession<T>>>) => ReturnType<typeof _getSession<T>>;
export declare const getSession: PrependOverload<typeof _getSession, WrappedGetSession>;
type WrappedUpdateSession = <T extends SessionDataT>(...args: Tail<Parameters<typeof _updateSession<T>>>) => ReturnType<typeof _updateSession<T>>;
export declare const updateSession: PrependOverload<typeof _updateSession, WrappedUpdateSession>;
type WrappedSealSession = <T extends SessionDataT>(...args: Tail<Parameters<typeof _sealSession<T>>>) => ReturnType<typeof _sealSession<T>>;
export declare const sealSession: PrependOverload<typeof _sealSession, WrappedSealSession>;
export declare const unsealSession: WrapFunction<typeof _unsealSession>;
export declare const clearSession: WrapFunction<typeof _clearSession>;
export declare const handleCacheHeaders: WrapFunction<typeof _handleCacheHeaders>;
export declare const handleCors: WrapFunction<typeof _handleCors>;
export declare const appendCorsHeaders: WrapFunction<typeof _appendCorsHeaders>;
export declare const appendCorsPreflightHeaders: WrapFunction<typeof _appendCorsPreflightHeaders>;
export declare const sendWebResponse: WrapFunction<typeof _sendWebResponse>;
type WrappedAppendHeader = <T extends HTTPHeaderName>(...args: Tail<Parameters<typeof _appendHeader<T>>>) => ReturnType<typeof _appendHeader<T>>;
export declare const appendHeader: PrependOverload<typeof _appendHeader, WrappedAppendHeader>;
export declare const appendHeaders: WrapFunction<typeof _appendResponseHeaders>;
type WrappedSetHeader = <T extends HTTPHeaderName>(...args: Tail<Parameters<typeof _setHeader<T>>>) => ReturnType<typeof _setHeader<T>>;
export declare const setHeader: PrependOverload<typeof _setHeader, WrappedSetHeader>;
export declare const setHeaders: WrapFunction<typeof _setResponseHeaders>;
export declare const getHeader: WrapFunction<typeof _getRequestHeader>;
export declare const getHeaders: WrapFunction<typeof _getRequestHeaders>;
export declare const getRequestFingerprint: WrapFunction<typeof _getRequestFingerprint>;
export declare const getRequestWebStream: WrapFunction<typeof _getRequestWebStream>;
export declare const readFormData: WrapFunction<typeof _readFormData>;
export declare const readMultipartFormData: WrapFunction<typeof _readMultipartFormData>;
type WrappedReadValidatedBody = <T, TEventInput = InferEventInput<'body', H3Event, T>>(...args: Tail<Parameters<typeof _readValidatedBody<T, H3Event, TEventInput>>>) => ReturnType<typeof _readValidatedBody<T, H3Event, TEventInput>>;
export declare const readValidatedBody: PrependOverload<typeof _readValidatedBody, WrappedReadValidatedBody>;
export declare const removeResponseHeader: WrapFunction<typeof _removeResponseHeader>;
export declare const getContext: WrapFunction<typeof _getContext>;
export declare const setContext: WrapFunction<typeof _setContext>;
export declare const clearResponseHeaders: WrapFunction<typeof _clearResponseHeaders>;
export declare const getWebRequest: WrapFunction<typeof toWebRequest>;
export { createApp as createServer } from 'h3';
export declare function getEvent(): H3Event<import('h3').EventHandlerRequest>;
export declare function handleHTTPEvent(event: H3Event): Promise<any>;
