import { createMemoryHistory } from "@tanstack/history";
import { mergeHeaders } from "@tanstack/start-client-core";
import { eventHandler, toWebRequest, getResponseHeaders } from "h3";
import { attachRouterServerSsrUtils, dehydrateRouter } from "./ssr-server.js";
function createStartHandler({
  createRouter,
  getRouterManifest
}) {
  return (cb) => {
    return eventHandler(async (event) => {
      const request = toWebRequest(event);
      const url = new URL(request.url);
      const href = url.href.replace(url.origin, "");
      const history = createMemoryHistory({
        initialEntries: [href]
      });
      const router = createRouter();
      attachRouterServerSsrUtils(router, await (getRouterManifest == null ? void 0 : getRouterManifest()));
      router.update({
        history
      });
      await router.load();
      dehydrateRouter(router);
      const responseHeaders = getStartResponseHeaders({ event, router });
      const response = await cb({
        request,
        router,
        responseHeaders
      });
      return response;
    });
  };
}
function getStartResponseHeaders(opts) {
  let headers = mergeHeaders(
    getResponseHeaders(opts.event),
    opts.event.___ssrRpcResponseHeaders,
    {
      "Content-Type": "text/html; charset=UTF-8"
    },
    ...opts.router.state.matches.map((match) => {
      return match.headers;
    })
  );
  const { redirect } = opts.router.state;
  if (redirect) {
    headers = mergeHeaders(headers, redirect.headers, {
      Location: redirect.href
    });
  }
  return headers;
}
export {
  createStartHandler
};
//# sourceMappingURL=createStartHandler.js.map
