"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const react = require("react");
const reactQuery = require("@tanstack/react-query");
const routerCore = require("@tanstack/router-core");
function routerWithQueryClient(router, queryClient, additionalOpts) {
  const seenQueryKeys = /* @__PURE__ */ new Set();
  const streamedQueryKeys = /* @__PURE__ */ new Set();
  const ogClientOptions = queryClient.getDefaultOptions();
  queryClient.setDefaultOptions({
    ...ogClientOptions,
    queries: {
      ...ogClientOptions.queries,
      _experimental_beforeQuery: (options) => {
        var _a, _b;
        (_b = (_a = ogClientOptions.queries) == null ? void 0 : _a._experimental_beforeQuery) == null ? void 0 : _b.call(_a, options);
        const hash = options.queryKeyHashFn || reactQuery.hashKey;
        if (router.isServer) {
          if (seenQueryKeys.has(hash(options.queryKey))) {
            return;
          }
          seenQueryKeys.add(hash(options.queryKey));
          if (queryClient.getQueryData(options.queryKey) !== void 0) {
            options.__skipInjection = true;
            return;
          }
        } else {
          const dehydratedClient = router.clientSsr.getStreamedValue(
            "__QueryClient__" + hash(options.queryKey)
          );
          if (dehydratedClient && !dehydratedClient.hydrated) {
            dehydratedClient.hydrated = true;
            reactQuery.hydrate(queryClient, dehydratedClient);
          }
        }
      },
      _experimental_afterQuery: (options, _result) => {
        var _a, _b;
        const hash = options.queryKeyHashFn || reactQuery.hashKey;
        if (router.isServer && !options.__skipInjection && queryClient.getQueryData(options.queryKey) !== void 0 && !streamedQueryKeys.has(hash(options.queryKey))) {
          streamedQueryKeys.add(hash(options.queryKey));
          router.serverSsr.streamValue(
            "__QueryClient__" + hash(options.queryKey),
            reactQuery.dehydrate(queryClient, {
              shouldDehydrateMutation: () => false,
              shouldDehydrateQuery: (query) => hash(query.queryKey) === hash(options.queryKey)
            })
          );
        }
        (_b = (_a = ogClientOptions.queries) == null ? void 0 : _a._experimental_afterQuery) == null ? void 0 : _b.call(
          _a,
          options,
          _result
        );
      }
    }
  });
  if ((additionalOpts == null ? void 0 : additionalOpts.handleRedirects) ?? true) {
    const ogMutationCacheConfig = queryClient.getMutationCache().config;
    queryClient.getMutationCache().config = {
      ...ogMutationCacheConfig,
      onError: (error, _variables, _context, _mutation) => {
        var _a;
        if (routerCore.isRedirect(error)) {
          return router.navigate(
            router.resolveRedirect({
              ...error,
              _fromLocation: router.state.location
            })
          );
        }
        return (_a = ogMutationCacheConfig.onError) == null ? void 0 : _a.call(
          ogMutationCacheConfig,
          error,
          _variables,
          _context,
          _mutation
        );
      }
    };
    const ogQueryCacheConfig = queryClient.getQueryCache().config;
    queryClient.getQueryCache().config = {
      ...ogQueryCacheConfig,
      onError: (error, _query) => {
        var _a;
        if (routerCore.isRedirect(error)) {
          return router.navigate(
            router.resolveRedirect({
              ...error,
              _fromLocation: router.state.location
            })
          );
        }
        return (_a = ogQueryCacheConfig.onError) == null ? void 0 : _a.call(ogQueryCacheConfig, error, _query);
      }
    };
  }
  const ogOptions = router.options;
  router.options = {
    ...router.options,
    dehydrate: () => {
      var _a;
      return {
        ...(_a = ogOptions.dehydrate) == null ? void 0 : _a.call(ogOptions),
        // When critical data is dehydrated, we also dehydrate the query client
        dehydratedQueryClient: reactQuery.dehydrate(queryClient)
      };
    },
    hydrate: (dehydrated) => {
      var _a;
      (_a = ogOptions.hydrate) == null ? void 0 : _a.call(ogOptions, dehydrated);
      reactQuery.hydrate(queryClient, dehydrated.dehydratedQueryClient);
    },
    context: {
      ...ogOptions.context,
      // Pass the query client to the context, so we can access it in loaders
      queryClient
    },
    // Wrap the app in a QueryClientProvider
    Wrap: ({ children }) => {
      const OuterWrapper = (additionalOpts == null ? void 0 : additionalOpts.WrapProvider) || react.Fragment;
      const OGWrap = ogOptions.Wrap || react.Fragment;
      return /* @__PURE__ */ jsxRuntime.jsx(OuterWrapper, { children: /* @__PURE__ */ jsxRuntime.jsx(reactQuery.QueryClientProvider, { client: queryClient, children: /* @__PURE__ */ jsxRuntime.jsx(OGWrap, { children }) }) });
    }
  };
  return router;
}
exports.routerWithQueryClient = routerWithQueryClient;
//# sourceMappingURL=index.cjs.map
