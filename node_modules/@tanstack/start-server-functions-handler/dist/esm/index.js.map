{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import { isNotFound, isRedirect } from '@tanstack/router-core'\nimport invariant from 'tiny-invariant'\nimport {\n  eventHandler,\n  getEvent,\n  getResponseStatus,\n  toWebRequest,\n} from '@tanstack/start-server-core'\nimport { startSerializer } from '@tanstack/start-client-core'\n// @ts-expect-error\nimport _serverFnManifest from 'tsr:server-fn-manifest'\nimport type { H3Event } from '@tanstack/start-server-core'\n\n// NOTE: This is a dummy export to silence warnings about\n// only having a default export.\nexport const dummy = 1\n\nexport default eventHandler(handleServerAction)\n\nconst serverFnManifest = _serverFnManifest as Record<\n  string,\n  {\n    functionName: string\n    extractedFilename: string\n    importer: () => Promise<any>\n  }\n>\n\nasync function handleServerAction(event: H3Event) {\n  const request = toWebRequest(event)!\n\n  const response = await handleServerRequest({\n    request,\n    event,\n  })\n  return response\n}\n\nfunction sanitizeBase(base: string | undefined) {\n  if (!base) {\n    throw new Error(\n      'ðŸš¨ process.env.TSS_SERVER_FN_BASE is required in start/server-handler/index',\n    )\n  }\n\n  return base.replace(/^\\/|\\/$/g, '')\n}\n\nasync function handleServerRequest({\n  request,\n  event,\n}: {\n  request: Request\n  event: H3Event\n}) {\n  const controller = new AbortController()\n  const signal = controller.signal\n  const abort = () => controller.abort()\n  event.node.req.on('close', abort)\n\n  const method = request.method\n  const url = new URL(request.url, 'http://localhost:3000')\n  // extract the serverFnId from the url as host/_server/:serverFnId\n  // Define a regex to match the path and extract the :thing part\n  const regex = new RegExp(\n    `${sanitizeBase(process.env.TSS_SERVER_FN_BASE)}/([^/?#]+)`,\n  )\n\n  // Execute the regex\n  const match = url.pathname.match(regex)\n  const serverFnId = match ? match[1] : null\n  const search = Object.fromEntries(url.searchParams.entries()) as {\n    payload?: any\n    createServerFn?: boolean\n  }\n\n  const isCreateServerFn = 'createServerFn' in search\n  const isRaw = 'raw' in search\n\n  if (typeof serverFnId !== 'string') {\n    throw new Error('Invalid server action param for serverFnId: ' + serverFnId)\n  }\n\n  const serverFnInfo = serverFnManifest[serverFnId]\n\n  if (!serverFnInfo) {\n    console.log('serverFnManifest', serverFnManifest)\n    throw new Error('Server function info not found for ' + serverFnId)\n  }\n\n  if (process.env.NODE_ENV === 'development')\n    console.info(`\\nServerFn Request: ${serverFnId}`)\n\n  let fnModule: undefined | { [key: string]: any }\n\n  if (process.env.NODE_ENV === 'development') {\n    fnModule = await (globalThis as any).app\n      .getRouter('server')\n      .internals.devServer.ssrLoadModule(serverFnInfo.extractedFilename)\n  } else {\n    fnModule = await serverFnInfo.importer()\n  }\n\n  if (!fnModule) {\n    console.log('serverFnManifest', serverFnManifest)\n    throw new Error('Server function module not resolved for ' + serverFnId)\n  }\n\n  const action = fnModule[serverFnInfo.functionName]\n\n  if (!action) {\n    console.log('serverFnManifest', serverFnManifest)\n    console.log('fnModule', fnModule)\n    throw new Error(\n      `Server function module export not resolved for serverFn ID: ${serverFnId}`,\n    )\n  }\n\n  // Known FormData 'Content-Type' header values\n  const formDataContentTypes = [\n    'multipart/form-data',\n    'application/x-www-form-urlencoded',\n  ]\n\n  const response = await (async () => {\n    try {\n      let result = await (async () => {\n        // FormData\n        if (\n          request.headers.get('Content-Type') &&\n          formDataContentTypes.some((type) =>\n            request.headers.get('Content-Type')?.includes(type),\n          )\n        ) {\n          // We don't support GET requests with FormData payloads... that seems impossible\n          invariant(\n            method.toLowerCase() !== 'get',\n            'GET requests with FormData payloads are not supported',\n          )\n\n          return await action(await request.formData(), signal)\n        }\n\n        // Get requests use the query string\n        if (method.toLowerCase() === 'get') {\n          // By default the payload is the search params\n          let payload: any = search\n\n          // If this GET request was created by createServerFn,\n          // then the payload will be on the payload param\n          if (isCreateServerFn) {\n            payload = search.payload\n          }\n\n          // If there's a payload, we should try to parse it\n          payload = payload ? startSerializer.parse(payload) : payload\n\n          // Send it through!\n          return await action(payload, signal)\n        }\n\n        // This must be a POST request, likely JSON???\n        const jsonPayloadAsString = await request.text()\n\n        // We should probably try to deserialize the payload\n        // as JSON, but we'll just pass it through for now.\n        const payload = startSerializer.parse(jsonPayloadAsString)\n\n        // If this POST request was created by createServerFn,\n        // it's payload will be the only argument\n        if (isCreateServerFn) {\n          return await action(payload, signal)\n        }\n\n        // Otherwise, we'll spread the payload. Need to\n        // support `use server` functions that take multiple\n        // arguments.\n        return await action(...(payload as any), signal)\n      })()\n\n      // Any time we get a Response back, we should just\n      // return it immediately.\n      if (result.result instanceof Response) {\n        return result.result\n      }\n\n      // If this is a non createServerFn request, we need to\n      // pull out the result from the result object\n      if (!isCreateServerFn) {\n        result = result.result\n\n        // The result might again be a response,\n        // and if it is, return it.\n        if (result instanceof Response) {\n          return result\n        }\n      }\n\n      // if (!search.createServerFn) {\n      //   result = result.result\n      // }\n\n      // else if (\n      //   isPlainObject(result) &&\n      //   'result' in result &&\n      //   result.result instanceof Response\n      // ) {\n      //   return result.result\n      // }\n\n      // TODO: RSCs\n      // if (isValidElement(result)) {\n      //   const { renderToPipeableStream } = await import(\n      //     // @ts-expect-error\n      //     '@vinxi/react-server-dom/server'\n      //   )\n\n      //   const pipeableStream = renderToPipeableStream(result)\n\n      //   setHeaders(event, {\n      //     'Content-Type': 'text/x-component',\n      //   } as any)\n\n      //   sendStream(event, response)\n      //   event._handled = true\n\n      //   return new Response(null, { status: 200 })\n      // }\n\n      if (isRedirect(result) || isNotFound(result)) {\n        return redirectOrNotFoundResponse(result)\n      }\n\n      return new Response(\n        result !== undefined ? startSerializer.stringify(result) : undefined,\n        {\n          status: getResponseStatus(getEvent()),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n    } catch (error: any) {\n      if (error instanceof Response) {\n        return error\n      }\n      // else if (\n      //   isPlainObject(error) &&\n      //   'result' in error &&\n      //   error.result instanceof Response\n      // ) {\n      //   return error.result\n      // }\n\n      // Currently this server-side context has no idea how to\n      // build final URLs, so we need to defer that to the client.\n      // The client will check for __redirect and __notFound keys,\n      // and if they exist, it will handle them appropriately.\n\n      if (isRedirect(error) || isNotFound(error)) {\n        return redirectOrNotFoundResponse(error)\n      }\n\n      console.info()\n      console.info('Server Fn Error!')\n      console.info()\n      console.error(error)\n      console.info()\n\n      return new Response(startSerializer.stringify(error), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n    }\n  })()\n  event.node.req.removeListener('close', abort)\n\n  if (isRaw) {\n    return response\n  }\n  if (process.env.NODE_ENV === 'development')\n    console.info(`ServerFn Response: ${response.status}`)\n\n  if (response.headers.get('Content-Type') === 'application/json') {\n    const cloned = response.clone()\n    const text = await cloned.text()\n    const payload = text ? JSON.stringify(JSON.parse(text)) : 'undefined'\n\n    if (process.env.NODE_ENV === 'development')\n      console.info(\n        ` - Payload: ${payload.length > 100 ? payload.substring(0, 100) + '...' : payload}`,\n      )\n  }\n  if (process.env.NODE_ENV === 'development') console.info()\n\n  return response\n}\n\nfunction redirectOrNotFoundResponse(error: any) {\n  const { headers, ...rest } = error\n\n  return new Response(JSON.stringify(rest), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(headers || {}),\n    },\n  })\n}\n"],"names":["payload"],"mappings":";;;;;AAeO,MAAM,QAAQ;AAErB,MAAe,QAAA,aAAa,kBAAkB;AAE9C,MAAM,mBAAmB;AASzB,eAAe,mBAAmB,OAAgB;AAC1C,QAAA,UAAU,aAAa,KAAK;AAE5B,QAAA,WAAW,MAAM,oBAAoB;AAAA,IACzC;AAAA,IACA;AAAA,EAAA,CACD;AACM,SAAA;AACT;AAEA,SAAS,aAAa,MAA0B;AAC9C,MAAI,CAAC,MAAM;AACT,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EAAA;AAGK,SAAA,KAAK,QAAQ,YAAY,EAAE;AACpC;AAEA,eAAe,oBAAoB;AAAA,EACjC;AAAA,EACA;AACF,GAGG;AACK,QAAA,aAAa,IAAI,gBAAgB;AACvC,QAAM,SAAS,WAAW;AACpB,QAAA,QAAQ,MAAM,WAAW,MAAM;AACrC,QAAM,KAAK,IAAI,GAAG,SAAS,KAAK;AAEhC,QAAM,SAAS,QAAQ;AACvB,QAAM,MAAM,IAAI,IAAI,QAAQ,KAAK,uBAAuB;AAGxD,QAAM,QAAQ,IAAI;AAAA,IAChB,GAAG,aAAa,QAAQ,IAAI,kBAAkB,CAAC;AAAA,EACjD;AAGA,QAAM,QAAQ,IAAI,SAAS,MAAM,KAAK;AACtC,QAAM,aAAa,QAAQ,MAAM,CAAC,IAAI;AACtC,QAAM,SAAS,OAAO,YAAY,IAAI,aAAa,SAAS;AAK5D,QAAM,mBAAmB,oBAAoB;AAC7C,QAAM,QAAQ,SAAS;AAEnB,MAAA,OAAO,eAAe,UAAU;AAC5B,UAAA,IAAI,MAAM,iDAAiD,UAAU;AAAA,EAAA;AAGvE,QAAA,eAAe,iBAAiB,UAAU;AAEhD,MAAI,CAAC,cAAc;AACT,YAAA,IAAI,oBAAoB,gBAAgB;AAC1C,UAAA,IAAI,MAAM,wCAAwC,UAAU;AAAA,EAAA;AAGhE,MAAA,QAAQ,IAAI,aAAa;AAC3B,YAAQ,KAAK;AAAA,oBAAuB,UAAU,EAAE;AAE9C,MAAA;AAEA,MAAA,QAAQ,IAAI,aAAa,eAAe;AAC/B,eAAA,MAAO,WAAmB,IAClC,UAAU,QAAQ,EAClB,UAAU,UAAU,cAAc,aAAa,iBAAiB;AAAA,EAAA,OAC9D;AACM,eAAA,MAAM,aAAa,SAAS;AAAA,EAAA;AAGzC,MAAI,CAAC,UAAU;AACL,YAAA,IAAI,oBAAoB,gBAAgB;AAC1C,UAAA,IAAI,MAAM,6CAA6C,UAAU;AAAA,EAAA;AAGnE,QAAA,SAAS,SAAS,aAAa,YAAY;AAEjD,MAAI,CAAC,QAAQ;AACH,YAAA,IAAI,oBAAoB,gBAAgB;AACxC,YAAA,IAAI,YAAY,QAAQ;AAChC,UAAM,IAAI;AAAA,MACR,+DAA+D,UAAU;AAAA,IAC3E;AAAA,EAAA;AAIF,QAAM,uBAAuB;AAAA,IAC3B;AAAA,IACA;AAAA,EACF;AAEM,QAAA,WAAW,OAAO,YAAY;AAC9B,QAAA;AACE,UAAA,SAAS,OAAO,YAAY;AAE9B,YACE,QAAQ,QAAQ,IAAI,cAAc,KAClC,qBAAqB;AAAA,UAAK,CAAC,SACzB;;AAAA,iCAAQ,QAAQ,IAAI,cAAc,MAAlC,mBAAqC,SAAS;AAAA;AAAA,QAAI,GAEpD;AAEA;AAAA,YACE,OAAO,kBAAkB;AAAA,YACzB;AAAA,UACF;AAEA,iBAAO,MAAM,OAAO,MAAM,QAAQ,SAAA,GAAY,MAAM;AAAA,QAAA;AAIlD,YAAA,OAAO,YAAY,MAAM,OAAO;AAElC,cAAIA,WAAe;AAInB,cAAI,kBAAkB;AACpBA,uBAAU,OAAO;AAAA,UAAA;AAInBA,qBAAUA,WAAU,gBAAgB,MAAMA,QAAO,IAAIA;AAG9C,iBAAA,MAAM,OAAOA,UAAS,MAAM;AAAA,QAAA;AAI/B,cAAA,sBAAsB,MAAM,QAAQ,KAAK;AAIzC,cAAA,UAAU,gBAAgB,MAAM,mBAAmB;AAIzD,YAAI,kBAAkB;AACb,iBAAA,MAAM,OAAO,SAAS,MAAM;AAAA,QAAA;AAMrC,eAAO,MAAM,OAAO,GAAI,SAAiB,MAAM;AAAA,MAAA,GAC9C;AAIC,UAAA,OAAO,kBAAkB,UAAU;AACrC,eAAO,OAAO;AAAA,MAAA;AAKhB,UAAI,CAAC,kBAAkB;AACrB,iBAAS,OAAO;AAIhB,YAAI,kBAAkB,UAAU;AACvB,iBAAA;AAAA,QAAA;AAAA,MACT;AAkCF,UAAI,WAAW,MAAM,KAAK,WAAW,MAAM,GAAG;AAC5C,eAAO,2BAA2B,MAAM;AAAA,MAAA;AAG1C,aAAO,IAAI;AAAA,QACT,WAAW,SAAY,gBAAgB,UAAU,MAAM,IAAI;AAAA,QAC3D;AAAA,UACE,QAAQ,kBAAkB,UAAU;AAAA,UACpC,SAAS;AAAA,YACP,gBAAgB;AAAA,UAAA;AAAA,QAClB;AAAA,MAEJ;AAAA,aACO,OAAY;AACnB,UAAI,iBAAiB,UAAU;AACtB,eAAA;AAAA,MAAA;AAeT,UAAI,WAAW,KAAK,KAAK,WAAW,KAAK,GAAG;AAC1C,eAAO,2BAA2B,KAAK;AAAA,MAAA;AAGzC,cAAQ,KAAK;AACb,cAAQ,KAAK,kBAAkB;AAC/B,cAAQ,KAAK;AACb,cAAQ,MAAM,KAAK;AACnB,cAAQ,KAAK;AAEb,aAAO,IAAI,SAAS,gBAAgB,UAAU,KAAK,GAAG;AAAA,QACpD,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,QAAA;AAAA,MAClB,CACD;AAAA,IAAA;AAAA,EACH,GACC;AACH,QAAM,KAAK,IAAI,eAAe,SAAS,KAAK;AAE5C,MAAI,OAAO;AACF,WAAA;AAAA,EAAA;AAEL,MAAA,QAAQ,IAAI,aAAa;AAC3B,YAAQ,KAAK,sBAAsB,SAAS,MAAM,EAAE;AAEtD,MAAI,SAAS,QAAQ,IAAI,cAAc,MAAM,oBAAoB;AACzD,UAAA,SAAS,SAAS,MAAM;AACxB,UAAA,OAAO,MAAM,OAAO,KAAK;AACzB,UAAA,UAAU,OAAO,KAAK,UAAU,KAAK,MAAM,IAAI,CAAC,IAAI;AAEtD,QAAA,QAAQ,IAAI,aAAa;AACnB,cAAA;AAAA,QACN,eAAe,QAAQ,SAAS,MAAM,QAAQ,UAAU,GAAG,GAAG,IAAI,QAAQ,OAAO;AAAA,MACnF;AAAA,EAAA;AAEJ,MAAI,QAAQ,IAAI,aAAa,uBAAuB,KAAK;AAElD,SAAA;AACT;AAEA,SAAS,2BAA2B,OAAY;AAC9C,QAAM,EAAE,SAAS,GAAG,KAAA,IAAS;AAE7B,SAAO,IAAI,SAAS,KAAK,UAAU,IAAI,GAAG;AAAA,IACxC,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,GAAI,WAAW,CAAA;AAAA,IAAC;AAAA,EAClB,CACD;AACH;"}