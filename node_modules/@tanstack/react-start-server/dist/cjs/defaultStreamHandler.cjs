"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const node_stream = require("node:stream");
const isbot = require("isbot");
const ReactDOMServer = require("react-dom/server");
const startServerCore = require("@tanstack/start-server-core");
const StartServer = require("./StartServer.cjs");
const defaultStreamHandler = startServerCore.defineHandlerCallback(
  async ({ request, router, responseHeaders }) => {
    if (typeof ReactDOMServer.renderToReadableStream === "function") {
      const stream = await ReactDOMServer.renderToReadableStream(
        /* @__PURE__ */ jsxRuntime.jsx(StartServer.StartServer, { router }),
        {
          signal: request.signal
        }
      );
      if (isbot.isbot(request.headers.get("User-Agent"))) {
        await stream.allReady;
      }
      const responseStream = startServerCore.transformReadableStreamWithRouter(
        router,
        stream
      );
      return new Response(responseStream, {
        status: router.state.statusCode,
        headers: responseHeaders
      });
    }
    if (typeof ReactDOMServer.renderToPipeableStream === "function") {
      const reactAppPassthrough = new node_stream.PassThrough();
      try {
        const pipeable = ReactDOMServer.renderToPipeableStream(
          /* @__PURE__ */ jsxRuntime.jsx(StartServer.StartServer, { router }),
          {
            ...isbot.isbot(request.headers.get("User-Agent")) ? {
              onAllReady() {
                pipeable.pipe(reactAppPassthrough);
              }
            } : {
              onShellReady() {
                pipeable.pipe(reactAppPassthrough);
              }
            },
            onError: (error, info) => {
              console.error("Error in renderToPipeableStream:", error, info);
            }
          }
        );
      } catch (e) {
        console.error("Error in renderToPipeableStream:", e);
      }
      const responseStream = startServerCore.transformPipeableStreamWithRouter(
        router,
        reactAppPassthrough
      );
      return new Response(responseStream, {
        status: router.state.statusCode,
        headers: responseHeaders
      });
    }
    throw new Error(
      "No renderToReadableStream or renderToPipeableStream found in react-dom/server. Ensure you are using a version of react-dom that supports streaming."
    );
  }
);
exports.defaultStreamHandler = defaultStreamHandler;
//# sourceMappingURL=defaultStreamHandler.cjs.map
