{"version":3,"file":"defaultRenderHandler.js","sources":["../../src/defaultRenderHandler.tsx"],"sourcesContent":["import ReactDOMServer from 'react-dom/server'\nimport { defineHandlerCallback } from '@tanstack/start-server-core'\nimport { StartServer } from './StartServer'\n\nexport const defaultRenderHandler = defineHandlerCallback(\n  async ({ router, responseHeaders }) => {\n    try {\n      let html = ReactDOMServer.renderToString(<StartServer router={router} />)\n      const injectedHtml = await Promise.all(\n        router.serverSsr!.injectedHtml,\n      ).then((htmls) => htmls.join(''))\n      html = html.replace(`</body>`, `${injectedHtml}</body>`)\n      return new Response(`<!DOCTYPE html>${html}`, {\n        status: router.state.statusCode,\n        headers: responseHeaders,\n      })\n    } catch (error) {\n      console.error('Render to string error:', error)\n      return new Response('Internal Server Error', {\n        status: 500,\n        headers: responseHeaders,\n      })\n    }\n  },\n)\n"],"names":[],"mappings":";;;;AAIO,MAAM,uBAAuB;AAAA,EAClC,OAAO,EAAE,QAAQ,sBAAsB;AACjC,QAAA;AACF,UAAI,OAAO,eAAe,eAAgB,oBAAA,aAAA,EAAY,QAAgB,CAAE;AAClE,YAAA,eAAe,MAAM,QAAQ;AAAA,QACjC,OAAO,UAAW;AAAA,MAAA,EAClB,KAAK,CAAC,UAAU,MAAM,KAAK,EAAE,CAAC;AAChC,aAAO,KAAK,QAAQ,WAAW,GAAG,YAAY,SAAS;AACvD,aAAO,IAAI,SAAS,kBAAkB,IAAI,IAAI;AAAA,QAC5C,QAAQ,OAAO,MAAM;AAAA,QACrB,SAAS;AAAA,MAAA,CACV;AAAA,aACM,OAAO;AACN,cAAA,MAAM,2BAA2B,KAAK;AACvC,aAAA,IAAI,SAAS,yBAAyB;AAAA,QAC3C,QAAQ;AAAA,QACR,SAAS;AAAA,MAAA,CACV;AAAA,IAAA;AAAA,EACH;AAEJ;"}