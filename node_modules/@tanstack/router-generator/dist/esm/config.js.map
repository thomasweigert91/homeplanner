{"version":3,"file":"config.js","sources":["../../src/config.ts"],"sourcesContent":["import path from 'node:path'\nimport { existsSync, readFileSync } from 'node:fs'\nimport { z } from 'zod'\nimport { virtualRootRouteSchema } from './filesystem/virtual/config'\n\nexport const configSchema = z.object({\n  target: z.enum(['react', 'solid']).optional().default('react'),\n  virtualRouteConfig: virtualRootRouteSchema.or(z.string()).optional(),\n  routeFilePrefix: z.string().optional(),\n  routeFileIgnorePrefix: z.string().optional().default('-'),\n  routeFileIgnorePattern: z.string().optional(),\n  routesDirectory: z.string().optional().default('./src/routes'),\n  generatedRouteTree: z.string().optional().default('./src/routeTree.gen.ts'),\n  quoteStyle: z.enum(['single', 'double']).optional().default('single'),\n  semicolons: z.boolean().optional().default(false),\n  disableTypes: z.boolean().optional().default(false),\n  addExtensions: z.boolean().optional().default(false),\n  disableLogging: z.boolean().optional().default(false),\n  disableManifestGeneration: z.boolean().optional().default(false),\n  enableRouteTreeFormatting: z.boolean().optional().default(true),\n  __enableAPIRoutesGeneration: z.boolean().optional(), // Internal flag to be turned on for TanStack Start\n  apiBase: z.string().optional().default('/api'),\n  routeTreeFileHeader: z\n    .array(z.string())\n    .optional()\n    .default([\n      '/* eslint-disable */',\n      '// @ts-nocheck',\n      '// noinspection JSUnusedGlobalSymbols',\n    ]),\n  routeTreeFileFooter: z.array(z.string()).optional().default([]),\n  autoCodeSplitting: z.boolean().optional(),\n  indexToken: z.string().optional().default('index'),\n  routeToken: z.string().optional().default('route'),\n  pathParamsAllowedCharacters: z\n    .array(z.enum([';', ':', '@', '&', '=', '+', '$', ',']))\n    .optional(),\n  customScaffolding: z\n    .object({\n      routeTemplate: z.string().optional(),\n      lazyRouteTemplate: z.string().optional(),\n      apiTemplate: z.string().optional(),\n    })\n    .optional(),\n  experimental: z\n    .object({\n      // TODO: This has been made stable and is now \"autoCodeSplitting\". Remove in next major version.\n      enableCodeSplitting: z.boolean().optional(),\n    })\n    .optional(),\n})\n\nexport type Config = z.infer<typeof configSchema>\n\ntype ResolveParams = {\n  configDirectory: string\n}\n\nexport function resolveConfigPath({ configDirectory }: ResolveParams) {\n  return path.resolve(configDirectory, 'tsr.config.json')\n}\n\nexport function getConfig(\n  inlineConfig: Partial<Config> = {},\n  configDirectory?: string,\n): Config {\n  if (configDirectory === undefined) {\n    configDirectory = process.cwd()\n  }\n  const configFilePathJson = resolveConfigPath({ configDirectory })\n  const exists = existsSync(configFilePathJson)\n\n  let config: Config\n\n  if (exists) {\n    config = configSchema.parse({\n      ...JSON.parse(readFileSync(configFilePathJson, 'utf-8')),\n      ...inlineConfig,\n    })\n  } else {\n    config = configSchema.parse(inlineConfig)\n  }\n\n  // If typescript is disabled, make sure the generated route tree is a .js file\n  if (config.disableTypes) {\n    config.generatedRouteTree = config.generatedRouteTree.replace(\n      /\\.(ts|tsx)$/,\n      '.js',\n    )\n  }\n\n  // if a configDirectory is used, paths should be relative to that directory\n  if (configDirectory) {\n    // if absolute configDirectory is provided, use it as the root\n    if (path.isAbsolute(configDirectory)) {\n      config.routesDirectory = path.resolve(\n        configDirectory,\n        config.routesDirectory,\n      )\n      config.generatedRouteTree = path.resolve(\n        configDirectory,\n        config.generatedRouteTree,\n      )\n    } else {\n      config.routesDirectory = path.resolve(\n        process.cwd(),\n        configDirectory,\n        config.routesDirectory,\n      )\n      config.generatedRouteTree = path.resolve(\n        process.cwd(),\n        configDirectory,\n        config.generatedRouteTree,\n      )\n    }\n  }\n\n  validateConfig(config)\n  return config\n}\n\nfunction validateConfig(config: Config) {\n  if (typeof config.experimental?.enableCodeSplitting !== 'undefined') {\n    const message = `\n------\n⚠️ ⚠️ ⚠️\nERROR: The \"experimental.enableCodeSplitting\" flag has been made stable and is now \"autoCodeSplitting\". Please update your configuration file to use \"autoCodeSplitting\" instead of \"experimental.enableCodeSplitting\".\n------\n`\n    console.error(message)\n    throw new Error(message)\n  }\n\n  if (config.indexToken === config.routeToken) {\n    throw new Error(\n      `The \"indexToken\" and \"routeToken\" options must be different.`,\n    )\n  }\n\n  if (\n    config.routeFileIgnorePrefix &&\n    config.routeFileIgnorePrefix.trim() === '_'\n  ) {\n    throw new Error(\n      `The \"routeFileIgnorePrefix\" cannot be an underscore (\"_\"). This is a reserved character used to denote a pathless route. Please use a different prefix.`,\n    )\n  }\n\n  return config\n}\n"],"names":[],"mappings":"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"}