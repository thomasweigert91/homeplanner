import { configSchema } from '@tanstack/router-generator';
import { z } from 'zod';
export function getUserViteConfig(config) {
    const { plugins, ...userConfig } = typeof config === 'function' ? config() : { ...config };
    return { plugins, userConfig };
}
/**
 * Not all the deployment presets are fully functional or tested.
 * @see https://github.com/TanStack/router/pull/2002
 */
const vinxiDeploymentPresets = [
    'alwaysdata', // untested
    'aws-amplify', // untested
    'aws-lambda', // untested
    'azure', // untested
    'azure-functions', // untested
    'base-worker', // untested
    'bun', // âœ… working
    'cleavr', // untested
    'cli', // untested
    'cloudflare', // untested
    'cloudflare-module', // untested
    'cloudflare-pages', // âœ… working
    'cloudflare-pages-static', // untested
    'deno', // untested
    'deno-deploy', // untested
    'deno-server', // untested
    'digital-ocean', // untested
    'edgio', // untested
    'firebase', // untested
    'flight-control', // untested
    'github-pages', // untested
    'heroku', // untested
    'iis', // untested
    'iis-handler', // untested
    'iis-node', // untested
    'koyeb', // untested
    'layer0', // untested
    'netlify', // âœ… working
    'netlify-builder', // untested
    'netlify-edge', // untested
    'netlify-static', // untested
    'nitro-dev', // untested
    'nitro-prerender', // untested
    'node', // partially working
    'node-cluster', // untested
    'node-server', // âœ… working
    'platform-sh', // untested
    'service-worker', // untested
    'static', // ðŸŸ§ partially working
    'stormkit', // untested
    'vercel', // âœ… working
    'vercel-edge', // untested
    'vercel-static', // untested
    'winterjs', // untested
    'zeabur', // untested
    'zeabur-static', // untested
];
const testedDeploymentPresets = [
    'bun',
    'netlify',
    'vercel',
    'cloudflare-pages',
    'node-server',
];
export function checkDeploymentPresetInput(preset) {
    if (!vinxiDeploymentPresets.includes(preset)) {
        console.warn(`Invalid deployment preset "${preset}". Available presets are: ${vinxiDeploymentPresets
            .map((p) => `"${p}"`)
            .join(', ')}.`);
    }
    if (!testedDeploymentPresets.includes(preset)) {
        console.warn(`The deployment preset '${preset}' is not fully supported yet and may not work as expected.`);
    }
    return preset;
}
export const serverSchema = z
    .object({
    routeRules: z.custom().optional(),
    preset: z.custom().optional(),
    static: z.boolean().optional(),
    prerender: z
        .object({
        routes: z.array(z.string()),
        ignore: z
            .array(z.custom())
            .optional(),
        crawlLinks: z.boolean().optional(),
    })
        .optional(),
})
    .and(z.custom());
const viteSchema = z.custom();
const viteReactSchema = z.custom();
const routersSchema = z.object({
    ssr: z
        .object({
        entry: z.string().optional(),
        middleware: z.string().optional(),
        vite: viteSchema.optional(),
    })
        .optional(),
    client: z
        .object({
        entry: z.string().optional(),
        base: z.string().optional(),
        vite: viteSchema.optional(),
    })
        .optional(),
    server: z
        .object({
        base: z.string().optional(),
        globalMiddlewareEntry: z.string().optional(),
        middleware: z.string().optional(),
        vite: viteSchema.optional(),
    })
        .optional(),
    api: z
        .object({
        entry: z.string().optional(),
        middleware: z.string().optional(),
        vite: viteSchema.optional(),
    })
        .optional(),
    public: z
        .object({
        dir: z.string().optional(),
        base: z.string().optional(),
    })
        .optional(),
});
const tsrConfig = configSchema.partial().extend({
    appDirectory: z.string().optional(),
});
export const inlineConfigSchema = z.object({
    react: viteReactSchema.optional(),
    vite: viteSchema.optional(),
    tsr: tsrConfig.optional(),
    routers: routersSchema.optional(),
    server: serverSchema.optional(),
});
