import { z } from 'zod';
import type { PluginOption } from 'vite';
import type { AppOptions as VinxiAppOptions } from 'vinxi';
import type { Options as ViteReactOptions } from '@vitejs/plugin-react';
import type { CustomizableConfig } from 'vinxi/dist/types/lib/vite-dev';
type StartUserViteConfig = CustomizableConfig | (() => CustomizableConfig);
export declare function getUserViteConfig(config?: StartUserViteConfig): {
    plugins: Array<PluginOption> | undefined;
    userConfig: CustomizableConfig;
};
/**
 * Not all the deployment presets are fully functional or tested.
 * @see https://github.com/TanStack/router/pull/2002
 */
declare const vinxiDeploymentPresets: readonly ["alwaysdata", "aws-amplify", "aws-lambda", "azure", "azure-functions", "base-worker", "bun", "cleavr", "cli", "cloudflare", "cloudflare-module", "cloudflare-pages", "cloudflare-pages-static", "deno", "deno-deploy", "deno-server", "digital-ocean", "edgio", "firebase", "flight-control", "github-pages", "heroku", "iis", "iis-handler", "iis-node", "koyeb", "layer0", "netlify", "netlify-builder", "netlify-edge", "netlify-static", "nitro-dev", "nitro-prerender", "node", "node-cluster", "node-server", "platform-sh", "service-worker", "static", "stormkit", "vercel", "vercel-edge", "vercel-static", "winterjs", "zeabur", "zeabur-static"];
type DeploymentPreset = (typeof vinxiDeploymentPresets)[number] | (string & {});
export declare function checkDeploymentPresetInput(preset: string): DeploymentPreset;
type HTTPSOptions = {
    cert?: string;
    key?: string;
    pfx?: string;
    passphrase?: string;
    validityDays?: number;
    domains?: Array<string>;
};
type ServerOptions_ = VinxiAppOptions['server'] & {
    https?: boolean | HTTPSOptions;
};
type ServerOptions = {
    [K in keyof ServerOptions_]: ServerOptions_[K];
};
export declare const serverSchema: z.ZodIntersection<z.ZodObject<{
    routeRules: z.ZodOptional<z.ZodType<{
        [path: string]: import("nitropack").NitroRouteRules;
    }, z.ZodTypeDef, {
        [path: string]: import("nitropack").NitroRouteRules;
    }>>;
    preset: z.ZodOptional<z.ZodType<DeploymentPreset, z.ZodTypeDef, DeploymentPreset>>;
    static: z.ZodOptional<z.ZodBoolean>;
    prerender: z.ZodOptional<z.ZodObject<{
        routes: z.ZodArray<z.ZodString, "many">;
        ignore: z.ZodOptional<z.ZodArray<z.ZodType<string | RegExp | ((path: string) => undefined | null | boolean), z.ZodTypeDef, string | RegExp | ((path: string) => undefined | null | boolean)>, "many">>;
        crawlLinks: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        routes: string[];
        ignore?: (string | RegExp | ((path: string) => undefined | null | boolean))[] | undefined;
        crawlLinks?: boolean | undefined;
    }, {
        routes: string[];
        ignore?: (string | RegExp | ((path: string) => undefined | null | boolean))[] | undefined;
        crawlLinks?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    static?: boolean | undefined;
    routeRules?: {
        [path: string]: import("nitropack").NitroRouteRules;
    } | undefined;
    preset?: DeploymentPreset | undefined;
    prerender?: {
        routes: string[];
        ignore?: (string | RegExp | ((path: string) => undefined | null | boolean))[] | undefined;
        crawlLinks?: boolean | undefined;
    } | undefined;
}, {
    static?: boolean | undefined;
    routeRules?: {
        [path: string]: import("nitropack").NitroRouteRules;
    } | undefined;
    preset?: DeploymentPreset | undefined;
    prerender?: {
        routes: string[];
        ignore?: (string | RegExp | ((path: string) => undefined | null | boolean))[] | undefined;
        crawlLinks?: boolean | undefined;
    } | undefined;
}>, z.ZodType<ServerOptions, z.ZodTypeDef, ServerOptions>>;
export declare const inlineConfigSchema: z.ZodObject<{
    react: z.ZodOptional<z.ZodType<ViteReactOptions, z.ZodTypeDef, ViteReactOptions>>;
    vite: z.ZodOptional<z.ZodType<StartUserViteConfig, z.ZodTypeDef, StartUserViteConfig>>;
    tsr: z.ZodOptional<z.ZodObject<z.objectUtil.extendShape<{
        target: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodEnum<["react", "solid"]>>>>;
        virtualRouteConfig: z.ZodOptional<z.ZodOptional<z.ZodUnion<[z.ZodType<import("@tanstack/virtual-file-routes").VirtualRootRoute, z.ZodTypeDef, import("@tanstack/virtual-file-routes").VirtualRootRoute>, z.ZodString]>>>;
        routeFilePrefix: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        routeFileIgnorePrefix: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodString>>>;
        routeFileIgnorePattern: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        routesDirectory: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodString>>>;
        generatedRouteTree: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodString>>>;
        quoteStyle: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodEnum<["single", "double"]>>>>;
        semicolons: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodBoolean>>>;
        disableTypes: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodBoolean>>>;
        addExtensions: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodBoolean>>>;
        disableLogging: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodBoolean>>>;
        disableManifestGeneration: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodBoolean>>>;
        enableRouteTreeFormatting: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodBoolean>>>;
        __enableAPIRoutesGeneration: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        apiBase: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodString>>>;
        routeTreeFileHeader: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>>;
        routeTreeFileFooter: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>>;
        autoCodeSplitting: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        indexToken: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodString>>>;
        routeToken: z.ZodOptional<z.ZodDefault<z.ZodOptional<z.ZodString>>>;
        pathParamsAllowedCharacters: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodEnum<[";", ":", "@", "&", "=", "+", "$", ","]>, "many">>>;
        customScaffolding: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            routeTemplate: z.ZodOptional<z.ZodString>;
            lazyRouteTemplate: z.ZodOptional<z.ZodString>;
            apiTemplate: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            routeTemplate?: string | undefined;
            lazyRouteTemplate?: string | undefined;
            apiTemplate?: string | undefined;
        }, {
            routeTemplate?: string | undefined;
            lazyRouteTemplate?: string | undefined;
            apiTemplate?: string | undefined;
        }>>>;
        experimental: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            enableCodeSplitting: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            enableCodeSplitting?: boolean | undefined;
        }, {
            enableCodeSplitting?: boolean | undefined;
        }>>>;
    }, {
        appDirectory: z.ZodOptional<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        experimental?: {
            enableCodeSplitting?: boolean | undefined;
        } | undefined;
        target?: "react" | "solid" | undefined;
        virtualRouteConfig?: string | import("@tanstack/virtual-file-routes").VirtualRootRoute | undefined;
        routeFilePrefix?: string | undefined;
        routeFileIgnorePrefix?: string | undefined;
        routeFileIgnorePattern?: string | undefined;
        routesDirectory?: string | undefined;
        generatedRouteTree?: string | undefined;
        quoteStyle?: "single" | "double" | undefined;
        semicolons?: boolean | undefined;
        disableTypes?: boolean | undefined;
        addExtensions?: boolean | undefined;
        disableLogging?: boolean | undefined;
        disableManifestGeneration?: boolean | undefined;
        enableRouteTreeFormatting?: boolean | undefined;
        __enableAPIRoutesGeneration?: boolean | undefined;
        apiBase?: string | undefined;
        routeTreeFileHeader?: string[] | undefined;
        routeTreeFileFooter?: string[] | undefined;
        autoCodeSplitting?: boolean | undefined;
        indexToken?: string | undefined;
        routeToken?: string | undefined;
        pathParamsAllowedCharacters?: (";" | ":" | "@" | "&" | "=" | "+" | "$" | ",")[] | undefined;
        customScaffolding?: {
            routeTemplate?: string | undefined;
            lazyRouteTemplate?: string | undefined;
            apiTemplate?: string | undefined;
        } | undefined;
        appDirectory?: string | undefined;
    }, {
        experimental?: {
            enableCodeSplitting?: boolean | undefined;
        } | undefined;
        target?: "react" | "solid" | undefined;
        virtualRouteConfig?: string | import("@tanstack/virtual-file-routes").VirtualRootRoute | undefined;
        routeFilePrefix?: string | undefined;
        routeFileIgnorePrefix?: string | undefined;
        routeFileIgnorePattern?: string | undefined;
        routesDirectory?: string | undefined;
        generatedRouteTree?: string | undefined;
        quoteStyle?: "single" | "double" | undefined;
        semicolons?: boolean | undefined;
        disableTypes?: boolean | undefined;
        addExtensions?: boolean | undefined;
        disableLogging?: boolean | undefined;
        disableManifestGeneration?: boolean | undefined;
        enableRouteTreeFormatting?: boolean | undefined;
        __enableAPIRoutesGeneration?: boolean | undefined;
        apiBase?: string | undefined;
        routeTreeFileHeader?: string[] | undefined;
        routeTreeFileFooter?: string[] | undefined;
        autoCodeSplitting?: boolean | undefined;
        indexToken?: string | undefined;
        routeToken?: string | undefined;
        pathParamsAllowedCharacters?: (";" | ":" | "@" | "&" | "=" | "+" | "$" | ",")[] | undefined;
        customScaffolding?: {
            routeTemplate?: string | undefined;
            lazyRouteTemplate?: string | undefined;
            apiTemplate?: string | undefined;
        } | undefined;
        appDirectory?: string | undefined;
    }>>;
    routers: z.ZodOptional<z.ZodObject<{
        ssr: z.ZodOptional<z.ZodObject<{
            entry: z.ZodOptional<z.ZodString>;
            middleware: z.ZodOptional<z.ZodString>;
            vite: z.ZodOptional<z.ZodType<StartUserViteConfig, z.ZodTypeDef, StartUserViteConfig>>;
        }, "strip", z.ZodTypeAny, {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        }, {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        }>>;
        client: z.ZodOptional<z.ZodObject<{
            entry: z.ZodOptional<z.ZodString>;
            base: z.ZodOptional<z.ZodString>;
            vite: z.ZodOptional<z.ZodType<StartUserViteConfig, z.ZodTypeDef, StartUserViteConfig>>;
        }, "strip", z.ZodTypeAny, {
            base?: string | undefined;
            entry?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        }, {
            base?: string | undefined;
            entry?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        }>>;
        server: z.ZodOptional<z.ZodObject<{
            base: z.ZodOptional<z.ZodString>;
            globalMiddlewareEntry: z.ZodOptional<z.ZodString>;
            middleware: z.ZodOptional<z.ZodString>;
            vite: z.ZodOptional<z.ZodType<StartUserViteConfig, z.ZodTypeDef, StartUserViteConfig>>;
        }, "strip", z.ZodTypeAny, {
            base?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
            globalMiddlewareEntry?: string | undefined;
        }, {
            base?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
            globalMiddlewareEntry?: string | undefined;
        }>>;
        api: z.ZodOptional<z.ZodObject<{
            entry: z.ZodOptional<z.ZodString>;
            middleware: z.ZodOptional<z.ZodString>;
            vite: z.ZodOptional<z.ZodType<StartUserViteConfig, z.ZodTypeDef, StartUserViteConfig>>;
        }, "strip", z.ZodTypeAny, {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        }, {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        }>>;
        public: z.ZodOptional<z.ZodObject<{
            dir: z.ZodOptional<z.ZodString>;
            base: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            base?: string | undefined;
            dir?: string | undefined;
        }, {
            base?: string | undefined;
            dir?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        server?: {
            base?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
            globalMiddlewareEntry?: string | undefined;
        } | undefined;
        ssr?: {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        client?: {
            base?: string | undefined;
            entry?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        api?: {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        public?: {
            base?: string | undefined;
            dir?: string | undefined;
        } | undefined;
    }, {
        server?: {
            base?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
            globalMiddlewareEntry?: string | undefined;
        } | undefined;
        ssr?: {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        client?: {
            base?: string | undefined;
            entry?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        api?: {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        public?: {
            base?: string | undefined;
            dir?: string | undefined;
        } | undefined;
    }>>;
    server: z.ZodOptional<z.ZodIntersection<z.ZodObject<{
        routeRules: z.ZodOptional<z.ZodType<{
            [path: string]: import("nitropack").NitroRouteRules;
        }, z.ZodTypeDef, {
            [path: string]: import("nitropack").NitroRouteRules;
        }>>;
        preset: z.ZodOptional<z.ZodType<DeploymentPreset, z.ZodTypeDef, DeploymentPreset>>;
        static: z.ZodOptional<z.ZodBoolean>;
        prerender: z.ZodOptional<z.ZodObject<{
            routes: z.ZodArray<z.ZodString, "many">;
            ignore: z.ZodOptional<z.ZodArray<z.ZodType<string | RegExp | ((path: string) => undefined | null | boolean), z.ZodTypeDef, string | RegExp | ((path: string) => undefined | null | boolean)>, "many">>;
            crawlLinks: z.ZodOptional<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            routes: string[];
            ignore?: (string | RegExp | ((path: string) => undefined | null | boolean))[] | undefined;
            crawlLinks?: boolean | undefined;
        }, {
            routes: string[];
            ignore?: (string | RegExp | ((path: string) => undefined | null | boolean))[] | undefined;
            crawlLinks?: boolean | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        static?: boolean | undefined;
        routeRules?: {
            [path: string]: import("nitropack").NitroRouteRules;
        } | undefined;
        preset?: DeploymentPreset | undefined;
        prerender?: {
            routes: string[];
            ignore?: (string | RegExp | ((path: string) => undefined | null | boolean))[] | undefined;
            crawlLinks?: boolean | undefined;
        } | undefined;
    }, {
        static?: boolean | undefined;
        routeRules?: {
            [path: string]: import("nitropack").NitroRouteRules;
        } | undefined;
        preset?: DeploymentPreset | undefined;
        prerender?: {
            routes: string[];
            ignore?: (string | RegExp | ((path: string) => undefined | null | boolean))[] | undefined;
            crawlLinks?: boolean | undefined;
        } | undefined;
    }>, z.ZodType<ServerOptions, z.ZodTypeDef, ServerOptions>>>;
}, "strip", z.ZodTypeAny, {
    server?: ({
        static?: boolean | undefined;
        routeRules?: {
            [path: string]: import("nitropack").NitroRouteRules;
        } | undefined;
        preset?: DeploymentPreset | undefined;
        prerender?: {
            routes: string[];
            ignore?: (string | RegExp | ((path: string) => undefined | null | boolean))[] | undefined;
            crawlLinks?: boolean | undefined;
        } | undefined;
    } & ServerOptions) | undefined;
    vite?: StartUserViteConfig | undefined;
    react?: ViteReactOptions | undefined;
    tsr?: {
        experimental?: {
            enableCodeSplitting?: boolean | undefined;
        } | undefined;
        target?: "react" | "solid" | undefined;
        virtualRouteConfig?: string | import("@tanstack/virtual-file-routes").VirtualRootRoute | undefined;
        routeFilePrefix?: string | undefined;
        routeFileIgnorePrefix?: string | undefined;
        routeFileIgnorePattern?: string | undefined;
        routesDirectory?: string | undefined;
        generatedRouteTree?: string | undefined;
        quoteStyle?: "single" | "double" | undefined;
        semicolons?: boolean | undefined;
        disableTypes?: boolean | undefined;
        addExtensions?: boolean | undefined;
        disableLogging?: boolean | undefined;
        disableManifestGeneration?: boolean | undefined;
        enableRouteTreeFormatting?: boolean | undefined;
        __enableAPIRoutesGeneration?: boolean | undefined;
        apiBase?: string | undefined;
        routeTreeFileHeader?: string[] | undefined;
        routeTreeFileFooter?: string[] | undefined;
        autoCodeSplitting?: boolean | undefined;
        indexToken?: string | undefined;
        routeToken?: string | undefined;
        pathParamsAllowedCharacters?: (";" | ":" | "@" | "&" | "=" | "+" | "$" | ",")[] | undefined;
        customScaffolding?: {
            routeTemplate?: string | undefined;
            lazyRouteTemplate?: string | undefined;
            apiTemplate?: string | undefined;
        } | undefined;
        appDirectory?: string | undefined;
    } | undefined;
    routers?: {
        server?: {
            base?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
            globalMiddlewareEntry?: string | undefined;
        } | undefined;
        ssr?: {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        client?: {
            base?: string | undefined;
            entry?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        api?: {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        public?: {
            base?: string | undefined;
            dir?: string | undefined;
        } | undefined;
    } | undefined;
}, {
    server?: ({
        static?: boolean | undefined;
        routeRules?: {
            [path: string]: import("nitropack").NitroRouteRules;
        } | undefined;
        preset?: DeploymentPreset | undefined;
        prerender?: {
            routes: string[];
            ignore?: (string | RegExp | ((path: string) => undefined | null | boolean))[] | undefined;
            crawlLinks?: boolean | undefined;
        } | undefined;
    } & ServerOptions) | undefined;
    vite?: StartUserViteConfig | undefined;
    react?: ViteReactOptions | undefined;
    tsr?: {
        experimental?: {
            enableCodeSplitting?: boolean | undefined;
        } | undefined;
        target?: "react" | "solid" | undefined;
        virtualRouteConfig?: string | import("@tanstack/virtual-file-routes").VirtualRootRoute | undefined;
        routeFilePrefix?: string | undefined;
        routeFileIgnorePrefix?: string | undefined;
        routeFileIgnorePattern?: string | undefined;
        routesDirectory?: string | undefined;
        generatedRouteTree?: string | undefined;
        quoteStyle?: "single" | "double" | undefined;
        semicolons?: boolean | undefined;
        disableTypes?: boolean | undefined;
        addExtensions?: boolean | undefined;
        disableLogging?: boolean | undefined;
        disableManifestGeneration?: boolean | undefined;
        enableRouteTreeFormatting?: boolean | undefined;
        __enableAPIRoutesGeneration?: boolean | undefined;
        apiBase?: string | undefined;
        routeTreeFileHeader?: string[] | undefined;
        routeTreeFileFooter?: string[] | undefined;
        autoCodeSplitting?: boolean | undefined;
        indexToken?: string | undefined;
        routeToken?: string | undefined;
        pathParamsAllowedCharacters?: (";" | ":" | "@" | "&" | "=" | "+" | "$" | ",")[] | undefined;
        customScaffolding?: {
            routeTemplate?: string | undefined;
            lazyRouteTemplate?: string | undefined;
            apiTemplate?: string | undefined;
        } | undefined;
        appDirectory?: string | undefined;
    } | undefined;
    routers?: {
        server?: {
            base?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
            globalMiddlewareEntry?: string | undefined;
        } | undefined;
        ssr?: {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        client?: {
            base?: string | undefined;
            entry?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        api?: {
            entry?: string | undefined;
            middleware?: string | undefined;
            vite?: StartUserViteConfig | undefined;
        } | undefined;
        public?: {
            base?: string | undefined;
            dir?: string | undefined;
        } | undefined;
    } | undefined;
}>;
export type TanStackStartInputConfig = z.input<typeof inlineConfigSchema>;
export type TanStackStartOutputConfig = z.infer<typeof inlineConfigSchema>;
export {};
