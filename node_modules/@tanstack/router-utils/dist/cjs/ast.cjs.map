{"version":3,"file":"ast.cjs","sources":["../../src/ast.ts"],"sourcesContent":["import { parse } from '@babel/parser'\nimport _generate from '@babel/generator'\nimport type { GeneratorOptions, GeneratorResult } from '@babel/generator'\nimport type { ParseResult } from '@babel/parser'\nimport type * as _babel_types from '@babel/types'\n\nexport type ParseAstOptions = {\n  code: string\n  filename: string\n  root: string\n  env?: 'server' | 'client' | 'ssr'\n}\n\nexport function parseAst(\n  opts: ParseAstOptions,\n): ParseResult<_babel_types.File> {\n  return parse(opts.code, {\n    plugins: ['jsx', 'typescript'],\n    sourceType: 'module',\n    ...{\n      root: opts.root,\n      filename: opts.filename,\n      env: opts.env,\n    },\n  })\n}\n\nlet generate = _generate\n\nif ('default' in generate) {\n  generate = generate.default as typeof generate\n}\ntype GenerateFromAstOptions = GeneratorOptions &\n  Required<Pick<GeneratorOptions, 'sourceFileName' | 'filename'>>\nexport function generateFromAst(\n  ast: _babel_types.Node,\n  opts?: GenerateFromAstOptions,\n): GeneratorResult {\n  return generate(\n    ast,\n    opts\n      ? { importAttributesKeyword: 'with', sourceMaps: true, ...opts }\n      : undefined,\n  )\n}\nexport type { GeneratorResult } from '@babel/generator'\n"],"names":["parse"],"mappings":";;;;AAaO,SAAS,SACd,MACgC;AACzB,SAAAA,OAAA,MAAM,KAAK,MAAM;AAAA,IACtB,SAAS,CAAC,OAAO,YAAY;AAAA,IAC7B,YAAY;AAAA,IACZ,GAAG;AAAA,MACD,MAAM,KAAK;AAAA,MACX,UAAU,KAAK;AAAA,MACf,KAAK,KAAK;AAAA,IAAA;AAAA,EACZ,CACD;AACH;AAEA,IAAI,WAAW;AAEf,IAAI,aAAa,UAAU;AACzB,aAAW,SAAS;AACtB;AAGgB,SAAA,gBACd,KACA,MACiB;AACV,SAAA;AAAA,IACL;AAAA,IACA,OACI,EAAE,yBAAyB,QAAQ,YAAY,MAAM,GAAG,SACxD;AAAA,EACN;AACF;;;"}