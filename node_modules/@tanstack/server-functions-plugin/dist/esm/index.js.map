{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import { mkdirSync, readFileSync, writeFileSync } from 'node:fs'\nimport path from 'node:path'\nimport { TanStackDirectiveFunctionsPlugin } from '@tanstack/directive-functions-plugin'\nimport type { Plugin } from 'vite'\nimport type {\n  DirectiveFn,\n  ReplacerFn,\n} from '@tanstack/directive-functions-plugin'\n\nexport type CreateRpcFn = (\n  functionId: string,\n  serverBase: string,\n  splitImportFn?: string,\n) => any\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var TSR_directiveFnsById: Record<string, DirectiveFn>\n}\n\nexport type ServerFnPluginOpts = {\n  manifestVirtualImportId: string\n  client: ServerFnPluginEnvOpts\n  ssr: ServerFnPluginEnvOpts\n  server: ServerFnPluginEnvOpts\n}\n\nexport type ServerFnPluginEnvOpts = {\n  getRuntimeCode: () => string\n  replacer: ReplacerFn\n}\n\nexport function createTanStackServerFnPlugin(opts: ServerFnPluginOpts): {\n  client: Array<Plugin>\n  ssr: Array<Plugin>\n  server: Array<Plugin>\n} {\n  const ROOT = process.cwd()\n  const manifestFilename =\n    'node_modules/.tanstack-start/server-functions-manifest.json'\n\n  globalThis.TSR_directiveFnsById = {}\n\n  const onDirectiveFnsById = (d: Record<string, DirectiveFn>) => {\n    // When directives are compiled, save them to our global variable\n    // This variable will be used both during development to incrementally\n    // look up server functions and during build/production to produce a\n    // static manifest that can be read by the server build\n    Object.assign(\n      globalThis.TSR_directiveFnsById,\n      Object.fromEntries(\n        Object.entries(d).map(([id, fn]) => [\n          id,\n          {\n            ...fn,\n            // This importer is required for the development server to\n            // work. It's also required in production, but cannot be serialized\n            // into the manifest because it's a dynamic import. Instead, as you'll\n            // see below, we augment the manifest output with a code-generated importer\n            // that looks exactly like this.\n            importer: () => import(fn.extractedFilename),\n          },\n        ]),\n      ),\n    )\n  }\n\n  const directive = 'use server'\n  const directiveLabel = 'Server Function'\n\n  return {\n    client: [\n      // The client plugin is used to compile the client directives\n      // and save them so we can create a manifest\n      TanStackDirectiveFunctionsPlugin({\n        envLabel: 'Client',\n        directive,\n        directiveLabel,\n        getRuntimeCode: opts.client.getRuntimeCode,\n        replacer: opts.client.replacer,\n        onDirectiveFnsById,\n        // devSplitImporter: `(globalThis.app.getRouter('server').internals.devServer.ssrLoadModule)`,\n      }),\n      {\n        // Now that we have the directiveFnsById, we need to create a new\n        // virtual module that can be used to import that manifest\n        name: 'tanstack-start-server-fn-vite-plugin-build-client',\n        generateBundle() {\n          // In production, we create a manifest so we can\n          // access it later in the server build, which likely does not run in the\n          // same vite build environment. This is essentially a\n          // serialized state transfer from the client build to the server\n          // build.\n\n          // Ensure the manifest directory exists\n          mkdirSync(path.dirname(manifestFilename), { recursive: true })\n\n          // Write the manifest to disk\n          writeFileSync(\n            path.join(ROOT, manifestFilename),\n            JSON.stringify(\n              Object.fromEntries(\n                Object.entries(globalThis.TSR_directiveFnsById).map(\n                  ([id, fn]) => [\n                    id,\n                    {\n                      functionName: fn.functionName,\n                      extractedFilename: fn.extractedFilename,\n                    },\n                  ],\n                ),\n              ),\n            ),\n          )\n        },\n      },\n    ],\n    ssr: [\n      // The SSR plugin is used to compile the server directives\n      TanStackDirectiveFunctionsPlugin({\n        envLabel: 'SSR',\n        directive,\n        directiveLabel,\n        getRuntimeCode: opts.ssr.getRuntimeCode,\n        replacer: opts.ssr.replacer,\n        onDirectiveFnsById,\n        // devSplitImporter: `(globalThis.app.getRouter('server').internals.devServer.ssrLoadModule)`,\n      }),\n    ],\n    server: [\n      {\n        // On the server, we need to be able to read the server-function manifest from the client build.\n        // This is likely used in the handler for server functions, so we can find the server function\n        // by its ID, import it, and call it. We can't do this in memory here because the builds happen in isolation,\n        // so the manifest is like a serialized state from the client build to the server build\n        name: 'tanstack-start-server-fn-vite-plugin-manifest-server',\n        enforce: 'pre',\n        resolveId: (id) => (id === opts.manifestVirtualImportId ? id : null),\n        load(id) {\n          if (id !== opts.manifestVirtualImportId) return null\n\n          // In development, we **can** use the in-memory manifest, and we should\n          // since it will be incrementally updated as we use the app and dynamic\n          // imports are triggered.\n          if (process.env.NODE_ENV === 'development') {\n            return `export default globalThis.TSR_directiveFnsById`\n          }\n\n          // In production, we need to read the manifest from the client build.\n          // The manifest at that point should contain the full set of server functions\n          // that were found in the client build.\n          const manifest = JSON.parse(\n            readFileSync(path.join(ROOT, manifestFilename), 'utf-8'),\n          )\n\n          // The manifest has a lot of information, but for now we only need to\n          // provide the function ID for lookup and the importer for loading\n          // This should keep the manifest small for now.\n          const manifestWithImports = `\n          export default {${Object.entries(manifest)\n            .map(\n              ([id, fn]: any) =>\n                `'${id}': {\n                  functionName: '${fn.functionName}',\n                  importer: () => import(${JSON.stringify(fn.extractedFilename)})\n                }`,\n            )\n            .join(',')}}`\n\n          return manifestWithImports\n        },\n      },\n      // On the server, we need to compile the server functions\n      // so they can be called by other server functions.\n      // This is also where we split the server function into a separate file\n      // so we can load them on demand in the worker.\n      TanStackDirectiveFunctionsPlugin({\n        envLabel: 'Server',\n        directive,\n        directiveLabel,\n        getRuntimeCode: opts.server.getRuntimeCode,\n        replacer: opts.server.replacer,\n        onDirectiveFnsById,\n      }),\n    ],\n  }\n}\n"],"names":["id"],"mappings":";;;AAgCO,SAAS,6BAA6B,MAI3C;AACM,QAAA,OAAO,QAAQ,IAAI;AACzB,QAAM,mBACJ;AAEF,aAAW,uBAAuB,CAAC;AAE7B,QAAA,qBAAqB,CAAC,MAAmC;AAKtD,WAAA;AAAA,MACL,WAAW;AAAA,MACX,OAAO;AAAA,QACL,OAAO,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,MAAM;AAAA,UAClC;AAAA,UACA;AAAA,YACE,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAMH,UAAU,MAAM,OAAO,GAAG;AAAA,UAAA;AAAA,QAE7B,CAAA;AAAA,MAAA;AAAA,IAEL;AAAA,EACF;AAEA,QAAM,YAAY;AAClB,QAAM,iBAAiB;AAEhB,SAAA;AAAA,IACL,QAAQ;AAAA;AAAA;AAAA,MAGN,iCAAiC;AAAA,QAC/B,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA,gBAAgB,KAAK,OAAO;AAAA,QAC5B,UAAU,KAAK,OAAO;AAAA,QACtB;AAAA;AAAA,MAAA,CAED;AAAA,MACD;AAAA;AAAA;AAAA,QAGE,MAAM;AAAA,QACN,iBAAiB;AAQf,oBAAU,KAAK,QAAQ,gBAAgB,GAAG,EAAE,WAAW,MAAM;AAG7D;AAAA,YACE,KAAK,KAAK,MAAM,gBAAgB;AAAA,YAChC,KAAK;AAAA,cACH,OAAO;AAAA,gBACL,OAAO,QAAQ,WAAW,oBAAoB,EAAE;AAAA,kBAC9C,CAAC,CAAC,IAAI,EAAE,MAAM;AAAA,oBACZ;AAAA,oBACA;AAAA,sBACE,cAAc,GAAG;AAAA,sBACjB,mBAAmB,GAAG;AAAA,oBAAA;AAAA,kBACxB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UAEJ;AAAA,QAAA;AAAA,MACF;AAAA,IAEJ;AAAA,IACA,KAAK;AAAA;AAAA,MAEH,iCAAiC;AAAA,QAC/B,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA,gBAAgB,KAAK,IAAI;AAAA,QACzB,UAAU,KAAK,IAAI;AAAA,QACnB;AAAA;AAAA,MAED,CAAA;AAAA,IACH;AAAA,IACA,QAAQ;AAAA,MACN;AAAA;AAAA;AAAA;AAAA;AAAA,QAKE,MAAM;AAAA,QACN,SAAS;AAAA,QACT,WAAW,CAAC,OAAQ,OAAO,KAAK,0BAA0B,KAAK;AAAA,QAC/D,KAAK,IAAI;AACH,cAAA,OAAO,KAAK,wBAAgC,QAAA;AAK5C,cAAA,QAAQ,IAAI,aAAa,eAAe;AACnC,mBAAA;AAAA,UAAA;AAMT,gBAAM,WAAW,KAAK;AAAA,YACpB,aAAa,KAAK,KAAK,MAAM,gBAAgB,GAAG,OAAO;AAAA,UACzD;AAKA,gBAAM,sBAAsB;AAAA,4BACV,OAAO,QAAQ,QAAQ,EACtC;AAAA,YACC,CAAC,CAACA,KAAI,EAAE,MACN,IAAIA,GAAE;AAAA,mCACa,GAAG,YAAY;AAAA,2CACP,KAAK,UAAU,GAAG,iBAAiB,CAAC;AAAA;AAAA,UAAA,EAGlE,KAAK,GAAG,CAAC;AAEL,iBAAA;AAAA,QAAA;AAAA,MAEX;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,iCAAiC;AAAA,QAC/B,UAAU;AAAA,QACV;AAAA,QACA;AAAA,QACA,gBAAgB,KAAK,OAAO;AAAA,QAC5B,UAAU,KAAK,OAAO;AAAA,QACtB;AAAA,MACD,CAAA;AAAA,IAAA;AAAA,EAEL;AACF;"}